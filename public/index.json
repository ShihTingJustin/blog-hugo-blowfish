[{"content":" 前言 # 繼上次寫了 《2021–2022 回顧 | 轉職軟體工程師後的第一年》文章後，沒想到已經兩年過去了。這兩年的時間裡發生了很多事情，我在工作上也有很大的轉變和深刻的體會，這篇文章就來分享一下轉職後第二年和第三年的回顧。\n由於這兩年的內容比較多，所以我會分成三個主題來談，可以點擊右邊的目錄來跳到你想看的部分。\n這兩年的工作狀況 轉職三年來的體悟 成長 這兩年的工作狀況 # WFH X 大徵才時代！資深工程師幾乎跑光！ # 2021 年的新冠疫情讓很多公司開始實施 WFH，Shoalter 也不例外。2021 下半年疫情趨緩，公司也開始要求大家回到辦公室上班；但到了 2022 年初，疫情再度爆發，公司又要求大家回到家工作。可以在家工作，不用花時間在通勤上，也可以更專注在工作上，加上已經一年經驗了，大部分的工作都能自己獨立完成，所以我還滿喜歡重啟 WFH 的。\n不過，當年還在菜的我，並不知道隨之而來的，是前所未有的大徵才時代。當 WFH 加上外面在大徵才，大概過了一季之後，公司的資深人員幾乎都跑光了！原本我算是中生代，但因為資深人員跑光，我就變成相對資深了。這段時間我除了原本的工作，還要接手一些資深人員的工作，這對我來說是一個很大的挑戰。\n好在主管動作很快，在短時間內就幫團隊補足缺少的人力資源，所以我也開始有機會帶新人，這對我來說是一個很好的學習機會。我可以透過帶領新人，來檢視自己的知識是否足夠完整，也可以透過新人的問題，來檢視自己的知識是否足夠清晰。\n什麼？！主管無預警離職？！ # 好景不常，2022 年下半年，我的主管無預警離職了！什麼叫無預警，就是他突然就消失了，而且離職的原因也不是很清楚。這對團隊來說是一個很大的打擊，因為專案幾乎都是主管在管理，他在公司也很有影響力。他離職後，我們的團隊就變成沒有主管的狀態，這段時間我們的工作都是由資深工程師來協調。\n刷經驗與升等的迴圈！ # 在主管離職後，公司將整個團隊交由資深工程師來管理。這段時間我也協助資深工程師分擔一些工作。對我來說，這就像上半年資深人員跑光一樣，往好處想這個情況是一個很好的學習機會，我可以透過這個機會，來學習如何管理團隊，如何與其他部門溝通，如何規劃技術架構等等。過了一陣子我們撐過了那段兵荒馬亂的日子，公司決定將我升為 senior programmer，這對我來說是一個很大的肯定，當然這中間也有前任主管在離職前的努力，這邊也要感謝他。\n升 senior programmer 之後，我開始接手一些比較大的專案，這些專案都是公司的重點專案；也有從 0 到 1 建立專案的機會，並接觸 Next.js page router、GitLab CI/CD、Docker、Vite 等技術，建立更完整的 git flow、release flow，確保開發成果可以順利交付。\n過了一年，我又升了一次職等，開始擔任 project lead，帶領 3 到 5 位工程師一起達成專案目標，也接觸了更多架構相關的技術如 Next.js app router、Monorepo、Kubernetes、ArgoCD；也有擔任面試官的機會，為團隊招募合適的人選。這段旅程中，我學會了如何在團隊中發揮我的領導能力，並且更深入地了解了軟體開發的種種流程與技巧。\n蹲得夠久了，該跳了！ # 如題，在 Shoalter 工作了將近 3 年，我覺得我已經學到了該學的東西，累積了一些成就，正巧有其他公司提供我更好的機會，所以我決定離開 Shoalter，轉換跑道，開始新的旅程。\n這是我的軟體職涯第二次跳槽，也是第一次透過 LinkedIn 找工作。故事是這樣的，有一天有個陌生人在 LinkedIn 上 DM 我，我瞥了一眼手機通知，他的 title 是三大公有雲其中一間的 Account Manager，我當時以為他是推廣平台服務的業務人員，所以沒有馬上點開來看。\n過了幾天我點開來細看，才發現他是在招募人才，訊息中他用英文大概描述工作內容，而且最底下的 title 是台灣知名電子公司的研發主管，我的直覺告訴我這絕對是個好機會。在看過 JD 之後，我覺得這個職位很適合我，於是我回覆他並安排了一次電話交流，我們聊了大概半小時，雙方感覺都還不錯，於是決定找一天約在咖啡廳進行面談。\n面談前我把該集團的相關資訊例如我預想的 report line 產品團隊組織架構、使用的技術等問題都整理成文件。在搜集資訊的過程中發現這個團隊的 GM 是我一直有在追蹤的部落客(Medium \u0026amp; LinkedIn)，我在轉職過程中曾經讀過他的文章 《中年轉職最重要的 5 件事 (轉職第 500 天的親身經驗分享)》，其中的哲學與觀點對當時的我很有幫助，所以也讓我對這個團隊有更多期待。\n這次的咖啡廳面談主要是讓我問問題，因為我已經整理好問題了，所以主管基本上就一題一題回答，過程中他也透過一些問題來了解我，看看我是否適合這個團隊和職位，整體來就像是 culture fit 的環節，但非常雙向，我們都覺得彼此的調性很合適，於是便安排了正式面試。\n在正式面試之前要先寫一個作業，用兩個禮拜的時間做出他們未來的產品雛形，我把這個作業當作火力展示，把我會的所有技術都用進去，還加了一個小彩蛋，這個作業也是我這次跳槽的一個重要環節。\n很快的兩個禮拜過去了，到了現場面試的那一天，一共有四個面試官，分別是 GM、兩位主管和一位同仁，整個過程大概花了兩三個小時。基本的自我介紹與履歷問答結束後，開始看作業，作業我做得相當完整，除了達成規格要求之外，我用了 Monorepo、Next.js、SSR、E2E testing、RWD 等技術展現我的技能樹；另外，除了作業本身，我還多做了官方網站，因為我知道這也是他們的一個專案需求，當我展示時官方網站，感覺就像 Apple 發表會最後的 one more thing，他們完全沒想到會有這一 part，竟然有人能夠在期限內完成這些內容，我相信這能讓他們感受到我的投入程度以及對這個機會的重視。\n接著是技術問答，技術主管問了非常多問題，像是前端架構、開發、測試、部署、流程、安全性等等，根本是部門主管的等級，有些問題還要畫白板，印象中我畫滿了兩次 XD。還有幾題是向 GM 和另一位主管解釋技術問題，這是在模擬專案運作時可能需要跨部門溝通，但對方不一定理解你的 domain knowledge 的情境，我在前幾份工作都有相關經驗，所以整個過程都很順利，我也很有自信，因為我知道我有能力勝任這個職位。最後是 GM 提問，他主要針對履歷整體、個人職涯規劃、為什麼離職、為什麼想要來這裡等方向提問，大部分都沒有標準答案，主要想看你的特質、思路和邏輯。\n整個面試結束之後主管送我離開，他覺得我表現得很棒，之後就是走核薪流程等消息。看到這裡，你應該跟我一樣，覺得我應該順利通過了，對吧？當時我完全沒想到這會是歷時九個多月的跳槽。\n之後的故事是，因為人力資源規劃的原因，他們當下只有開一個缺，最終錄取了另一位有 domain knowledge 的前端工程師。當下我還滿失望的，畢竟投入了那麼多時間跟精神，但也知道這是一個很好的經驗，我很感謝他們給我這個機會，讓我學到了很多東西。\n有壞消息就會有好消息，根據規劃，他們會在年底開始招募整個工程團隊，屆時我也會是第一個被通知的人，所以我也很期待下一次的機會。後面的故事就是再面試一次並順利錄取了，流程相同，便不細說了。\n轉職三年來的體悟 # 在體制內成長：把手上有的牌打好 # 技術能力：學習公司的 tech stack # 進入一間公司之後，第一要務就是把公司正在用的 tech stack 學好學滿，你可以透過公司的資源，來學習更多技術，也可以透過公司的專案，來累積更多經驗。有些人可能會覺得公司的專案很無聊，但是你可以透過這些專案，來學習如何與其他部門溝通、如何規劃技術架構、如何管理專案等等。這些都是你在 side project 學不到的東西，也是你在公司裡面成長的重要一環。\n公司既有的 tech stack 學得差不多之後，你可以開始思考如何改善公司的流程，如何提升團隊的效率，如何提升專案的品質等等。這些地方有很多是可以用新技術來解決的，也都是你在公司裡面成長的重要的一環。\n像我曾經遇過幾個問題：\nGatsby 框架的 build time 太長，到後期甚至有要到 2 個小時😫，我就建議使用 Vite React 或是 Next.js 框架，一來改善 build time，二來 DX(developer experience) 也更好，並規劃 migration plan，讓團隊可以順利過渡\nCode review 過程中發現大家的 mr 和 commit 粒度都太大，所以我寫了一份文件跟大家分享為什麼要控制粒度，以及這對於團隊的影響\n沒有統一的 commit style，我就提出了使用 commitlint、husky、lint-staged 來統一 commit style\n沒有統一的 release 流程，我就開個 confluence page，寫了一份 release 流程，並且明確規定了每個階段的負責人要做什麼\n專案資訊散落在各個地方，我一樣是開個 confluence page，走 SSOT(Single Source of Truth) 原則，把專案的資訊全部整理在一起，大家統一看這份文件，之後有新專案就是把資訊填進去對應的欄位\n沒有時間撰寫測試，在我擔任 project lead 的時候，我想辦法跟 PM 要了足夠的時間，讓團隊至少可以寫 E2E test，這樣在交付的時候，至少可以保證功能是正常的，未來進行維護也會比較容易\n這些作法不僅提升了團隊的效率，也更容易管理專案的進度與品質。\n提升能見度：球來就打 \u0026amp; 深化工作成果 # 在組織內要升等，技術能力是基本的要有的，在同個 team 裡面，你的技術特別強，確實會有優勢。但是到了公司層級，多個 team 在比較時，對於管理階層來說，大家技術上差距不會太大，相反的，你個人的能見度與 impact 才是重點，例如：\n其他部門找不到對應窗口時會不會來找你？(扛壩子是你？) 專案卡住時你有沒有辦法推動？ 遇到棘手問題你能不能解掉？不論是用技術解法還是管理解法。 這邊分享一些作法可以提升能見度，例如\n開發核心專案功能：核心功能通常都比較複雜，也牽涉到多個部門，是展現綜合能力的好機會，這樣的戰功是最容易被看見的，因為高層會議都會被拿出來 review\n技術瓶頸或是 Debug：球來就打，沒人能解決或沒人想做的東西，你把他處理好，就是你的機會\n代理主管（資深工程師）去參加專案會議（管理會議）：乍看之下是個麻煩事，但是透過這個機會，你可以獲得曝光，讓其他部門的人知道你是誰，你在做什麼，你可以幫助他們什麼\n寫文件：寫文件是一個很好的方式，可以讓你的工作成果被更多人看到，也可以讓你的工作成果被更多人使用，在做績效考核也可以當作佐證\n分享：分享專案成果、分享新技術、分享你的經驗或想法等等，都是提升能見度的好方法\n我自己歸納了一下，深化工作成果的流程大概是：尋找 issue → 思考 solutions → 解決後寫成文件。\n職涯發展：兩條戰線同時進行 # 第一條戰線：現在的工作 # 每天都要去公司 8 小時，我的態度就是就把事情做好，存在感刷滿，努力學技術、拚升等加薪。這條線是最基本的，也是最重要的，因為你的工作表現好不好，直接影響你的升等加薪。很多人容易忽略的點是，在體制內做出成績或升等也是面試的亮點，不論是寫在履歷上，還是 reference Check。你的工作表現好不好，會直接影響你的職涯發展，所以要把這條線做好。\n第二條戰線：未來的工作 # 認真工作不代表不關注求職市場，相反的，認真工作更應該定期更新工作成果到 LinkedIn 或履歷，並關注求職市場動向，好機會都是在你意想不到的時候出現的。像我是從來沒有在關履歷的。\n世界上不存在完美的人，自然也沒有完美的公司，如果你對現職感到不滿意就出去試試水溫，或是有好機會就去試試看，不要畫地自限。也許你會成功，發現你的價值比你想像的還要高；也許你會失敗，發現你還有不足之處，也會學著感謝目前的工作，但沒有去嘗試，你永遠不會知道。這些都是好事，因為你可以透過這些經驗，來提升自己，保持對市場的理解，讓自己更有競爭力。\n中高階的職位通常都是透過 LinkedIn 來找人，所以你的 LinkedIn 專業形象很重要，你可以參考一些 JD，看看他們需要什麼樣的技能，規劃自己的技能樹，應用到工作上，再將工作成果寫在 LinkedIn，建立可被搜尋的專業形象。\n以下是我在 LinkedIn 上看到的一些文章，分享給大家：\n我沒有寄履歷是他自己找到我 永遠不要在你需要的時候才找工作 成功不是線性的 成長 # 技術成長 # 入行時的履歷 summary\n技術能力及產品思維兼備的軟體工程師，擅長 Vue.js + Node.js 全端開發，具備 3 年產品經理工作經驗，熟悉與不同職能協作的工作模式。 對於技術抱持開放的態度，曾使用 Ansible、Azure Pipeline 等 DevOps 工具建 立 pipeline。\n現在的履歷 summary\n👨🏻‍💻 3 年前端開發經驗，熟悉 TypeScript, React.js, Next.js，有帶領 3 - 5 人運作專案的管理經驗 📦 熟悉前端架構及 CI/CD 流程設計，能從無到有打造專案，交付符合規格和品質要求的產品 🤝 具備新創與大型企業的專案運作經驗，有出色的溝通能力與團隊協作精神 🔥 熱愛寫程式和親手打造產品的過程，追求卓越的使用者體驗和開發者體驗，為團隊創造價值 入行時的技能樹\nJavaScript、Vue.js、Node.js、Express 以及基礎的 CI/CD 和 Docker。 現在的技能樹\nLanguages: JavaScript, TypeScript\nFrameworks: React.js, Next.js\nWeb Technologies: RWD, mobile web, desktop, in-app WebView, iframe\nProduct Type: E-Commerce, CMS, Chatroom\nUI Library: Shadcn UI, Ant Design, Material UI, Chakra UI, Storybook\nStyling: TailwindCSS, SCSS\nPackages: SWR, i18next (i18n), Redux, Redux toolkit, Redux Saga, React Router Dom\nAPI: Restful, GraphQL, WebSocket\nCI/CD: GitLab CI/CD, Docker, Kubernetes (K8S), Argo CD\nCloud: Azure Static Web Apps\nTesting: Cypress, Jest, Vitest, React Testing Library, Mock Service Worker\nDebug: Browser devtools, mitmproxy, OpenSearch, Git\nEmulators: Xcode, Android Studio\nAI Tools: ChatGPT, GitHub Copilot\nBackend: Node.js, Express, MongoDB, MySQL\nProjects: Jira, Confluence\nOthers: TurboRepo (Monorepo), Git\n大部分的技能都是在工作中學到的，少數是下班自學，基本上 Frontend Developer Roadmap 跟 State of JavaScript 裡面的熱門技能我都多少有接觸到，這些技能不僅讓我在工作上更有自信。但我認為最關鍵的在於，我能夠把這些技能結合起來，根據公司的需求從 0 開始設計並建立合適的前端架構與流程。\n有兩句話是我在面試時很常聽到的靈魂拷問：\n對後端工程師來說\n除了 CRUD API DB 操作之外，你還會做什麼？\n對前端工程師來說\n除了寫 UI component 之外，你還會做什麼？\n對於 Junior 或 Mid level 工程師聽到這句話，通常是丈二金剛摸不著頭緒，我不做這件事情我還要做什麼？畢竟 task 都是 Manager 或 Senior 分配下來的，看到的都只是一個產品的一小部分，其實這兩句話是在問你是否有架構能力。\n架構相關的經驗是很寶貴且值錢的，一個前端工程師如果對自己的職涯有所追求的話，除了撰寫 UI 元件，也要多學習架構相關的議題，例如開發方法的選擇、框架的選擇、渲染方法的選擇、CI/CD 等等。\n光是 CI 兩個字裡面能做的東西可多了，要如何確保程式碼的品質？coding style？能夠正常運作？安全性？\nCD 則更加複雜，前端可以用靜態的或是 serverless 的佈署方式，build 完就放到 AWS S3 之類的地方；也可以做容器化的佈署，用 Docker 打包成 image，然後佈署在 Kubernetes，若有搭配合適的框架便可以享受到 server-side 的優點，也更容易擴展，但隨之而來的是需要更多的架構設計和管理成本。\nProduction level 的產品還要考量 Observability，也就是監控，要如何知道系統有沒有問題？有沒有人在使用？有沒有報錯？\n如果是 To C 的產品，還要考量 SEO，如何讓搜尋引擎更容易找到你的網站？如何讓使用者更容易找到你的網站？你會不會使用 GA or GTM 來追蹤使用者行為？還是只會埋 script？(以前真的有遇過面試者只是埋了 script 就寫在履歷上，面試當場說其實不知道怎麼用\u0026hellip;)\n更完整的產品團隊還會有 A/B testing，如何讓使用者更容易使用你的產品？加入哪些功能？刪除哪些功能？\n這些都是需要考量的議題，都沒有絕對的答案．但都是 Manager 或 Senior 需要有的技能和經驗，如果能夠 pick up 起來在職涯上自然會有更多的選擇。當然你可能受限於團隊沒辦法有這些經驗，這時候就要主動去尋找公司和團隊的痛點或最佳化的方向，然後提出合適的解決方案，這樣才能夠有機會學習到這些議題。或是在公司之外做一些 side project 上，找一些開源專案來參與，會有更多的機會學習到這些議題。\n另外，近年 AI 大爆發，我最常用的工具是 ChatGPT 和 GitHub Copilot，這兩個工具讓我在開發時更有效率，學習新技術時更快速，每個月花幾百塊錢直接原地變強真的是非常划算。\n薪資成長 # 回憶起當初，轉職第一份工作年薪是 5X，實在是太低了，所以當初只做三個月就逃了 🤣。\n第二份剛開始是 7X，後來升等兩次，range 可參考公司職缺寫的 81 ~ 130。 第三份到台達，range 可參考 104 人力銀行所整理的 上市櫃薪資排行榜，中位數約 142。 前陣子參考 104 人力銀行統計的 2024 前端工程師薪水收入，發現自己已經不在這個範圍內了\u0026hellip;\n轉職兩三年能夠把薪資提升到這個程度，真的不是單純靠自己努力，過程中遇到許多貴人的幫助，像是：\n一起準備轉職且都比我優秀太多的 ALPHA Camp 同學們 轉職找第一份工作時願意錄取我的主管 幫助我內推達成第一次跳槽的朋友 剛進 Shoalter 時教我怎麼寫 React 的朋友 願意相信我、給我學習機會和升等機會的 Shoalter 主管 願意相信我、與我合作的同事們 願意相信我、並且給我一個火箭上的座位的主管。 心態成長 # 自律 vs. 動力 # 轉職軟體工程師時的投入是短期的密集衝刺，雖然八到九個月的時間也不算短啦 😂，但相對於職涯，確實短的多。而職涯是一場馬拉松，如果僅是依賴轉職時的動力，其實很難持續跑下去，就算硬跑也很難跑得好。\n學習自律(Discipline)，而非依賴動力(Motivation)。自律是一種習慣，是一種能力，是一種態度，是一種信念，是一種內在的力量。動力則是一種情緒，是一種感覺，是一種外在的力量，是一種短暫的狀態。動力很容易消失，但自律卻能讓你持續前進，不論是在工作上還是生活上。\n定期整理筆記、學習新技術、運動、讀書、旅遊、投資等等，都是自律的一部分，這些習慣讓我在工作上更有自信，也讓生活更有樂趣，雖然有些項目還沒辦法達成完全的自律，但當踏出第一步時，我就比之前的自己更進步了。\n提高自己被利用的價值 # 我一直在思考除了運氣、貴人之外的要素，畢竟這些是可遇不可求的。\n是什麼讓我能夠在轉職這條路上走得比較順利？\n我認為是因為我有一些被利用的價值，這些價值讓我在轉職的過程中更容易被看見，也更容易被利用。這邊講的利用不是負面的，而是指我有一些技能、經驗、特質，讓我在團隊中有一些特別的地方，延伸出一些特別的機會和成就。\n例如我在第一份工作有建立 CI pipeline 的經驗，所以在第二份工作 Shoalter 時，我就可以提出 CI/CD 的建議，並且有機會實際建立 CI/CD pipeline。儘管我當時對於相關技術並不熟悉，但是主管願意相信我，給我機會學習，邊學邊做。也因為這個機會，我後續便有了從 0 建立專案的技術和經驗，畢竟對團隊來說，你 CI/CD 都會建了，專案也就跟著建一建吧😆。\n另外，在 Shoalter 時，我也有機會參與招募，這讓我更了解招募的過程，嘗試在面試者和面試官的角色中切換，反思公司在招募時的思考方式以及看重的價值。\n也因為我在 Shoalter 有從 0 建立專案的技術和經驗，同時累積了新創與大型企業的運作經驗，也有帶領團隊完成專案的經驗，所以在第三份工作台達時，我就可以結合過去的經驗提出建立新專案的建議，並且有機會實際建立全新的專案架構。\n對台達來說，我有的不僅是技術和經驗，還有管理團隊的特質，這些都是我在工作中累積的，他們提高了我的被利用的價值，讓我在轉職的過程中更容易被看見且更有競爭力。\n學習資源 # 以前在 AC 擔任助教，學生很常問的問題就是有哪些資源可以學習，這邊我有整理一些覺得不錯的資源，不定期更新，如果你有好的資源也歡迎分享給我。\nUseful Resources 以上就是我這兩年的回顧，希望對你有所幫助，有問題歡迎加我 LinkedIn 聊聊。\n","date":"2024 May 5","externalUrl":null,"permalink":"/posts/2024-05-05-year-reflection/","section":"Posts","summary":"這兩年的時間，我在工作上有了一些轉變，和新的體會，這篇文章就來分享一下。","title":"2022–2024 回顧 | 轉職軟體工程師後的第二、三年","type":"posts"},{"content":"","date":"2024 May 5","externalUrl":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"2024 May 5","externalUrl":null,"permalink":"/tags/career/","section":"Tags","summary":"","title":"Career","type":"tags"},{"content":"","date":"2024 May 5","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"2024 May 5","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"2024 May 5","externalUrl":null,"permalink":"/tags/reflection/","section":"Tags","summary":"","title":"Reflection","type":"tags"},{"content":"","date":"2024 May 5","externalUrl":null,"permalink":"/","section":"Renderer","summary":"","title":"Renderer","type":"page"},{"content":"","date":"2024 May 5","externalUrl":null,"permalink":"/tags/senior/","section":"Tags","summary":"","title":"Senior","type":"tags"},{"content":"","date":"2024 May 5","externalUrl":null,"permalink":"/tags/softwareengineer/","section":"Tags","summary":"","title":"SoftwareEngineer","type":"tags"},{"content":"","date":"2024 May 5","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"4 May 2024","externalUrl":null,"permalink":"/en/tags/example/","section":"Tags","summary":"","title":"Example","type":"tags"},{"content":"an example to get you started\nThis is a heading # This is a subheading # This is a subsubheading # This is a subsubsubheading # This is a paragraph with bold and italic text. Check more at Blowfish documentation undefined\n","date":"4 May 2024","externalUrl":null,"permalink":"/en/notes/1714812556763-new-note/","section":"Notes","summary":"an example to get you started\nThis is a heading # This is a subheading # This is a subsubheading # This is a subsubsubheading # This is a paragraph with bold and italic text.","title":"new-note","type":"notes"},{"content":"","date":"4 May 2024","externalUrl":null,"permalink":"/en/tags/tag/","section":"Tags","summary":"","title":"Tag","type":"tags"},{"content":"","date":"2023 August 17","externalUrl":null,"permalink":"/categories/note/","section":"Categories","summary":"","title":"Note","type":"categories"},{"content":"","date":"2023 August 17","externalUrl":null,"permalink":"/notes/","section":"Notes","summary":"","title":"Notes","type":"notes"},{"content":"","date":"2023 August 17","externalUrl":null,"permalink":"/tags/resource/","section":"Tags","summary":"","title":"Resource","type":"tags"},{"content":" Useful Resources # 技能樹 # Developer Roadmaps\nState of JavaScript\nState of CSS\n書籍 # JS 犀牛書\nAdvanced React，作者 Nadia Makarevich 曾擔任 Atlassian 的前端架構師\n職涯 # 巴哈經典文 - 【密技】台灣軟體業業界現況詳解、軟體工程師指南 Youtube # Alex 宅幹嘛\nSonny Sangha\nWeb Dev Simplified\nDave Gray\nMonsterlessons Academy\nZAINKEEPSCODE\nCoderOne\nJavaScript Mastery\nLama Dev\nHuXn WebDev\nCodeBucks\n社群 # Facebook 社團\u0026amp;粉專\nFront-End Developers Taiwan\n++Backend 台灣 (Backend Tw)++\nWill 保哥的技術交流中心\nExplainThis.io\nFreecodecamp\n網頁開發雜記\nLinkedIn\nByteByteGo Instagram\nK 前端工程師\n前端輕鬆聊\n論壇\nStackOverflow\nDEV Community\nGitHub\nmorioh\nBlog # 胡立\nPJ\n老莫\nDeveloper Way\n套件 # ++npm trends++ 語法 # Can I Use 刷題 # L eetCode\ncodewars\nHackerRanks\nCodeSignal\nAlgoExpert\n求職 # CakeResume\n104\nmeet.jobs\nYourator\nLinkedIn\narc()\nJavaScript Works\n線上課程 # Udemy\n臺大開放式課程\nhahow\nHiSKIO\nTaiwan MOOC\n其他 # 免費大全 ","date":"2023 August 17","externalUrl":null,"permalink":"/notes/2023-08-17-useful-resources/","section":"Notes","summary":"Useful Resources # 技能樹 # Developer Roadmaps\nState of JavaScript\nState of CSS\n書籍 # JS 犀牛書\nAdvanced React，作者 Nadia Makarevich 曾擔任 Atlassian 的前端架構師\n職涯 # 巴哈經典文 - 【密技】台灣軟體業業界現況詳解、軟體工程師指南 Youtube # Alex 宅幹嘛","title":"Useful Resources","type":"notes"},{"content":"","date":"2023 June 12","externalUrl":null,"permalink":"/tags/cookies/","section":"Tags","summary":"","title":"Cookies","type":"tags"},{"content":"","date":"2023 June 12","externalUrl":null,"permalink":"/tags/http/","section":"Tags","summary":"","title":"HTTP","type":"tags"},{"content":"","date":"2023 June 12","externalUrl":null,"permalink":"/tags/ietf/","section":"Tags","summary":"","title":"IETF","type":"tags"},{"content":"","date":"2023 June 12","externalUrl":null,"permalink":"/tags/rfc/","section":"Tags","summary":"","title":"RFC","type":"tags"},{"content":" IETF Datatracker # RFC2616 # http\nRFC6265 # HTTP State Management Mechanism (eg. Cookies)\n","date":"2023 June 12","externalUrl":null,"permalink":"/notes/2023-06-12-standards-and-documentation/","section":"Notes","summary":"IETF Datatracker # RFC2616 # http\nRFC6265 # HTTP State Management Mechanism (eg. Cookies)","title":"RFC","type":"notes"},{"content":"","date":"2023 June 12","externalUrl":null,"permalink":"/tags/standards/","section":"Tags","summary":"","title":"Standards","type":"tags"},{"content":"","date":"2023 June 8","externalUrl":null,"permalink":"/tags/react/","section":"Tags","summary":"","title":"React","type":"tags"},{"content":" https://www.youtube.com/watch?v=v9M20STEjgc https://slides.com/tz5514/useeffect-guide\nuseState # 在 React，畫面是資料延伸的結果 eg. event handler\n每一次 render 都有自己的 event handlers\n在每一次 render 之間的 props \u0026amp; state 都是獨立、不互相影響的 在每一次 render 中的 props \u0026amp; state 永遠都會保持不變，例如該次函式執行的常數 event handlers 是以原始資料 (props \u0026amp; state) 延伸出來的另一種資料結果 因此，每一次 render 都有自己的 event handlers useEffect # 重要觀念 # 每一次 render 都有自己的 effects\neffect 是 render 結果的副產物，每個 effect 都只屬於特定一次的 render\n當依賴的值從外部發生 mutate 時，closure 是不直覺，難以預測結果的。 當依賴的值，永遠不變時，closures 是直覺易懂的，因為他依賴的都是常數，執行的行為效果永遠固定\nCleanup function # A cleanup function 會在 B 之前先執行，在執行 B\n單向資料流，資料改變時，結果才會跟著改變\n宣告式的同步化，而非生命週期 # 不關心過程跟方法，只關心目標與結果 中間跑了一百次也無所謂，只要 input 固定，output 是對應結果就好\nFC 中是 mount 還是 update 其實不重要，對 FC 來說是同一件事 (CC 中 didMount 跟 didUpdate 不同)\n用途 # 根據目前的 props \u0026amp; state 來同步 React elements 以外的東西，並且避免阻塞 UI 畫面的渲染 理想上 effect 無論跟著 render 執行了幾次，程式都應該保持同步且正常運作 是為了同步資料到畫面以外的地方\n為什麼 effect \u0026amp; cleanup 要在每次 render 後都執行 # 避免受到上一次 render 的結果影響 不管執行幾次 都完美運行\ndependencies 是一種效能最佳化 # 為避免重複執行 effect CC 要在 didUpdate 判斷 dependencies 是否相同 FC 不需要\n把會改變的值放到 dependencies，如果沒改變，就會在 render 時跳過這個 effect\ndependencies 是「同步動作的資料依賴清單」，如果這個清單中記載的所有依賴，都跟上一次 render 時沒有差異，就代表沒有再次進行同步的需要，可以略過本次 effect 來節省效能。\nuseEffect 的核心思考模型整理 # FC 沒有生命週期 API，只有 useEffect 用於「同步資料到 effect 行為」 useEffect 讓你根據目前的資料來同步 React elements (畫面) 以外的任何事物 一般情況下，useEffect 會在每次 component render 然後瀏覽器完成 DOM 的更新 \u0026amp; 繪製畫面後才執行，以避免阻塞 component render 的過程 \u0026amp; 瀏覽器繪製畫面的過程 useEffect 概念上不區分 mount 與 update 的情況，他們被視為是同一種情境 預設情況下，每一次 render 後都應該執行屬於該 render 的 useEffect，來確保同步的正確性與完整性 理想上這個 useEffect 無論隨著 render 重複執行了幾次，你的程式都應該保持同步且正常運作 useEffect 的 dependencies 是一種「忽略某些非必要的執行」的效能最佳化，而不是控制 effect 發生在特定的 component 生命週期，或特定的商業邏輯時機 不要欺騙 hooks 的 dependencies chain # 把 function 定義到 useEffect 中 (只有該 effect 用到，沒有共用需求) 跟資料流無關的流程抽到 component 外部 用 useCallback 函式在 FC 與 hooks 中是屬於資料流的一部分\nDependencies chain # useCallback useMemo 讓由原始資料產生出來的延伸資料能夠完全的參與資料流，並以 dependencies chain 維持 useEffect 的同步可靠性\nuseReducer 是 dependencies chain 的合法作弊手段 # 從動作分離更新\u0026hellip;\n以 dependencies 來控制 useEffect 執行邏輯的誤區 # useEffect 的用途是同步資料到 effect，不是生命週期 FC \u0026amp; hooks 也沒有提供任生命週期的 API useEffect 的 dependencies 是一種「忽略某些非必要的執行」的效能最佳化，而不是控制 effect 發生在特定的 component 生命週期，或特定的商業邏輯時機 Reusable state — React 18 的 useEffect 在 mount 時為何會執行兩次？ # component 必須設計得有足夠的彈性，多次 mount \u0026amp; unmount 也不會壞掉 Offscreen API 讓 React 可以在 UI 切換時保留 component 的 local state 及對應的真實 DOM elements，像是把他們暫時隱藏，而不是真的移除 當這個 component 有再次顯示的需求時，就能以之前留下來的 state 再次 mount 為了確保 component 能支援上述特性，effect 必須要是可重複執行也不會壞掉的 React 哲學 # 有依賴資料的延伸的任何東西都要成為資料流的一部分\n過去在 CC 中寫了 class 的 method 使用了 this.props blablabla，實際上這個 function 不會因為 props 改變而改變，所以無法透過這個 function 辨識到資料流發生變化，因此後續的同步就很容易漏掉。\nFC想做的是只要 input props 固定，output 就固定。為了完美做到這件事，必須讓所有用到原始資料的東西都參與資料流，包含 effect 用到的 function 、function 用到的資料、function 要寫在 component 內就要用 useCallback 來保證整個資料流 chain 不會斷掉。\n","date":"2023 June 8","externalUrl":null,"permalink":"/notes/2023-06-08-react-note-meetup-useeffect-from-zet/","section":"Notes","summary":"Reactjs.tw Meetup #14 筆記","title":"Reactjs.tw Meetup #14 | 都 2022 年了你可能還是不懂 useEffect | Zet","type":"notes"},{"content":"","date":"2023 April 19","externalUrl":null,"permalink":"/tags/javascript/","section":"Tags","summary":"","title":"JavaScript","type":"tags"},{"content":"V8 is Google’s open source high-performance JavaScript and WebAssembly engine, written in C++. It is used in Chrome and in Node.js, among others. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors. V8 can run standalone, or can be embedded into any C++ application.\nReference # https://github.com/v8 https://v8.dev/ https://chromium.googlesource.com/v8/v8.git ","date":"2023 April 19","externalUrl":null,"permalink":"/notes/2023-04-19-js-v8-engine/","section":"Notes","summary":"V8 is Google’s open source high-performance JavaScript and WebAssembly engine, written in C++. It is used in Chrome and in Node.js, among others. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.","title":"JavaScript V8 Engine","type":"notes"},{"content":"","date":"2023 April 6","externalUrl":null,"permalink":"/tags/git/","section":"Tags","summary":"","title":"Git","type":"tags"},{"content":" Config # Get repository or global options # git config --list git config -l Identity setup # git config --global user.name \u0026#34;John Doe\u0026#34; git config --global user.email johndoe@example.com you can also use --local to use this identity only in the directory\ngit config --local user.name \u0026#34;John Doe\u0026#34; git config --local user.email johndoe@example.com Remote # # git remote set-url origin \u0026lt;repo url\u0026gt; Tag # Push branch and tag\ngit push --follow-tags Delete origin tag\ngit push --delete origin v0.1.3 Delete local tag\ngit tag -d v0.1.3 Commit # Remove latest commit # git reset HEAD^ --hard Branch # Reomve local branch # git branch -D \u0026lt;branch\u0026gt; Reomve remote branch # git push --delete \u0026lt;remote\u0026gt; \u0026lt;branch\u0026gt; Git Aliases # git config --global alias.br branch git config --global alias.co checkout git config --global alias.cp cherry-pick git config --global alias.sp stash pop git config --global alias.st stash git config --global alias.pl pull git config --global alias.ps push Reset author information for all commits # for all branch\ngit filter-branch -f --env-filter \u0026#39; GIT_AUTHOR_NAME=\u0026#39;ShihTingJustin\u0026#39; GIT_AUTHOR_EMAIL=\u0026#39;justinhuang777@gmail.com\u0026#39; GIT_COMMITTER_NAME=\u0026#39;ShihTingJustin\u0026#39; GIT_COMMITTER_EMAIL=\u0026#39;justinhuang777@gmail.com\u0026#39; \u0026#39; -- --all you could also use HEAD\ngit filter-branch -f --env-filter \u0026#39; GIT_AUTHOR_NAME=\u0026#39;ShihTingJustin\u0026#39; GIT_AUTHOR_EMAIL=\u0026#39;justinhuang777@gmail.com\u0026#39; GIT_COMMITTER_NAME=\u0026#39;ShihTingJustin\u0026#39; GIT_COMMITTER_EMAIL=\u0026#39;justinhuang777@gmail.com\u0026#39; \u0026#39; HEAD src: https://git-scm.com/docs/git-filter-branch\nWhy are my contributions not showing up on my profile? # make sure the email setting in git config is as same as GitHub email\ngit config user.email or read GitHub Doc\n","date":"2023 April 6","externalUrl":null,"permalink":"/notes/2023-04-06-git-snippet/","section":"Notes","summary":"Git config and commands that I use frequently","title":"Git Snippet","type":"notes"},{"content":"物件的深拷貝(深層複製)是指其屬性和複製的來源物件的屬性不共享相同的引用（指向相同的底層值）的副本。因此，當您更改來源或副本時，可以確保不會導致其他物件也發生更改；也就是說，您不會意外地對來源或副本造成預期之外的更改。這種行為與淺層複製的行為形成對比，在淺層複製中，對來源或副本的更改可能也會導致其他物件的更改（因為兩個物件共享相同的引用）。\nstructureClone # 簡介 # 實際上，瀏覽器本身就有很多地方需要深度複製例如﹔將資料儲存在 IndexedDB 時序列化和反序列化。利用 postMessage() 將資料傳給 Web Worker 等情境都需要類似的處理。而內部其實是使用一種稱為結構複製的演算法，過去這功能並沒有提供給開發者，但現在我們可以使用 structuredClone() 了。\n功能與限制 # 結構複製解決了大部分 JSON.stringify() 的問題，可以使用遞迴資料結構，JS 內建型別，效能也不錯。\n但還是有些限制\nPrototypes﹔如果您使用 structuredClone() 複製某類別物件實例 Class Instance 您只會取得單純的物件不會包涵 prototype 的部分 Function﹔如果您的物件包涵了函式則會被移除 不可複製﹔有些值是不可複製的例如 Error 和 DOM 節點 其他深層複製方法 # Lodash 轉 JSON 字串再轉回來 const copy = JSON.parse(JSON.stringify(original)); 但需要特別注意有些值經過 JSON.stringify/parse 處理後，會產生變化，導致非預期的結果發生：\nundefined : 會連同 key 一起消失。 NaN : 會被轉成 null。 Infinity :會被轉成 null。 regExp /*/: 會被轉成空 {}。 Date : 型別會由 Data 轉成 string。 function : 會連同 key 一起消失。 const originalData = { undefined: undefined, // undefined values will be completely lost, including the key containing the undefined value notANumber: NaN, // will be forced to null infinity: Infinity, // will be forced to null regExp: /.*/, // will be forced to an empty object {} date: new Date(\u0026#34;1999-12-31T23:59:59\u0026#34;), // Date will get stringified function: () =\u0026gt; {}, }; const faultyClonedData = JSON.parse(JSON.stringify(originalData)); console.log(faultyClonedData.undefined); // undefined console.log(faultyClonedData.notANumber); // null console.log(faultyClonedData.infinity); // null console.log(faultyClonedData.regExp); // {} console.log(faultyClonedData.date); // \u0026#34;1999-12-31T15:59:59.000Z\u0026#34; console.log(faultyClonedData.function); // undefined Reference # JS 中的淺拷貝 (Shallow copy) 與深拷貝 (Deep copy) 原理與實作\n[譯]在 JavaScript 使用 structuredClone 深度複製\n最新 HTML 规范——structuredClone 深拷贝函数，能取代 JSON 或者 lodash 吗？\nHow to deep clone a JavaScript object\n","date":"2022 November 2","externalUrl":null,"permalink":"/notes/2022-11-02-deep-copy/","section":"Notes","summary":"Some methods to deep copy an object in JavaScript","title":"Deep Copy in JavaScript","type":"notes"},{"content":"","date":"2022 November 2","externalUrl":null,"permalink":"/tags/deepcopy/","section":"Tags","summary":"","title":"DeepCopy","type":"tags"},{"content":"","date":"2022 November 2","externalUrl":null,"permalink":"/tags/multi-threads/","section":"Tags","summary":"","title":"Multi-Threads","type":"tags"},{"content":"","date":"2022 November 2","externalUrl":null,"permalink":"/tags/web-workers/","section":"Tags","summary":"","title":"Web Workers","type":"tags"},{"content":"\n左邊的 setTimeout 版本，質數計算期間動晝完全凍結，算完才繼續，且因執行間隔錯亂，粒子原本應隨機亂跑，一度出現整群同步移動。而 Web Wroker 版，全程動畫順暢未受干擾，證明質數計算是用另一個執行緒在跑，不中斷網頁的 JavaScript 執行，真正實踐了多執行緒。\n最後再補充另一個實驗，瀏覽器本身是多執行緒環境，受單一執行緒限制的是網頁的 JavaScript 程式，其他如 Render、CSS 等運算等作業，瀏覽器會安排不同執行緒處理。因此，如果今天是用純 CSS 製作的動晝(我找到一個雪花飄效果當範例)，用 setTimeout 或 Web Worker 的差異不大。(註：測量結果未包含一秒延遲，故比之前少一秒)\nReference # MDN\n阮一峰的网络日志 Web Worker 使用教程\n發揮 JavaScript 多執行緒威力 - Web Worker\n","date":"2022 November 2","externalUrl":null,"permalink":"/notes/2022-11-02-web-workers/","section":"Notes","summary":"Web Workers 是 JavaScript 的多執行緒解決方案","title":"Web Workers","type":"notes"},{"content":"","date":"4 September 2022","externalUrl":null,"permalink":"/en/tags/ipsum/","section":"Tags","summary":"","title":"Ipsum","type":"tags"},{"content":"","date":"4 September 2022","externalUrl":null,"permalink":"/en/tags/lorem/","section":"Tags","summary":"","title":"Lorem","type":"tags"},{"content":"","date":"4 September 2022","externalUrl":null,"permalink":"/en/categories/post/","section":"Categories","summary":"","title":"Post","type":"categories"},{"content":"","date":"4 September 2022","externalUrl":null,"permalink":"/en/tags/post/","section":"Tags","summary":"","title":"Post","type":"tags"},{"content":" Lorem ipsum dolor sit amet # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna. Nulla venenatis volutpat libero, in laoreet leo fringilla eget. Etiam consequat sed nisi sit amet interdum. Pellentesque ullamcorper at turpis in ultrices. Pellentesque et elit mauris. Aenean eu augue sit amet nunc interdum ultricies. Aenean eleifend consectetur sapien vitae consectetur. Donec risus mauris, finibus at condimentum at, lacinia sit amet neque. Nulla facilisi. Suspendisse sollicitudin dolor quis eros tempor, a tempus ex varius.\nNunc non leo non magna # Nunc non leo non magna ornare condimentum. Phasellus consequat nunc ut tellus porttitor bibendum. In pharetra ullamcorper metus quis mollis. Mauris bibendum, est in commodo hendrerit, dolor purus hendrerit dolor, at pharetra sapien erat sit amet ante. Etiam aliquet euismod libero, vel tincidunt felis mollis at. Sed scelerisque, tortor in convallis auctor, elit quam consectetur lacus, quis posuere risus libero non sem. Mauris sagittis nisi id aliquam lacinia. Vivamus finibus velit sed condimentum aliquet. Nullam in ante a erat lacinia semper. Curabitur pretium justo at leo maximus, quis dignissim nulla posuere. Donec eget consectetur neque, et mattis dui. Vivamus at mi enim. Nullam et nisi est. Nullam eget eros blandit, convallis odio eget, ornare enim.\nQuisque ultricies # Quisque ultricies tincidunt sem nec tincidunt. Aenean nibh diam, dapibus varius ornare nec, suscipit ut arcu. Integer ut elit sollicitudin, fermentum ipsum nec, tempus eros. Donec hendrerit facilisis maximus. Pellentesque eu mi ipsum. Vivamus diam tellus, varius sed dolor at, finibus tempus lorem. Morbi sed mauris quis enim vehicula hendrerit. Sed et sollicitudin est. Maecenas scelerisque ligula ac purus gravida, et feugiat nibh blandit. Integer id quam ac arcu convallis interdum eget sed libero. Aliquam varius est quis efficitur efficitur. Cras id turpis magna. Aenean cursus, libero auctor ullamcorper vestibulum, nisl risus consectetur nisi, ut molestie enim libero sed ipsum.\nEtiam sollicitudin # Etiam sollicitudin, ante ac fermentum varius, lorem ante congue mi, auctor dictum magna sem sed nibh. In et est id neque gravida aliquet quis a felis. Mauris tempor lectus ut gravida ornare. Curabitur at elementum tortor, in feugiat elit. Aenean auctor diam ut egestas rhoncus. Quisque tristique venenatis risus vitae suscipit. Nunc feugiat purus sed dolor gravida, non ullamcorper metus suscipit. Sed et tortor odio. Pellentesque at scelerisque nulla. In ut aliquam metus. Vivamus congue augue at pellentesque rhoncus. Donec a lectus tincidunt, aliquet libero sit amet, commodo arcu. Vivamus hendrerit quis augue eu lacinia. Sed sodales velit condimentum eros varius vulputate.\nProin tempor lorem # Proin tempor lorem quam, ac maximus lectus sodales et. Sed laoreet orci vel metus luctus lobortis. Nam ex velit, vehicula id tristique sed, blandit eu nisi. Quisque semper libero nec massa malesuada congue. In faucibus lorem at diam fringilla, vel viverra magna lobortis. Ut commodo est urna, ut aliquet enim sagittis ut. Nulla posuere arcu sed lobortis accumsan. Phasellus fringilla dolor id est lobortis feugiat. Quisque enim elit, faucibus a mauris non, mattis aliquet orci. Nunc sagittis viverra erat, id condimentum lacus suscipit quis.\n","date":"4 September 2022","externalUrl":null,"permalink":"/en/posts/post-lite-one/","section":"Posts","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Super cool article that I wrote","type":"posts"},{"content":" Lorem ipsum dolor sit amet # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna. Nulla venenatis volutpat libero, in laoreet leo fringilla eget. Etiam consequat sed nisi sit amet interdum. Pellentesque ullamcorper at turpis in ultrices. Pellentesque et elit mauris. Aenean eu augue sit amet nunc interdum ultricies. Aenean eleifend consectetur sapien vitae consectetur. Donec risus mauris, finibus at condimentum at, lacinia sit amet neque. Nulla facilisi. Suspendisse sollicitudin dolor quis eros tempor, a tempus ex varius.\nNunc non leo non magna # Nunc non leo non magna ornare condimentum. Phasellus consequat nunc ut tellus porttitor bibendum. In pharetra ullamcorper metus quis mollis. Mauris bibendum, est in commodo hendrerit, dolor purus hendrerit dolor, at pharetra sapien erat sit amet ante. Etiam aliquet euismod libero, vel tincidunt felis mollis at. Sed scelerisque, tortor in convallis auctor, elit quam consectetur lacus, quis posuere risus libero non sem. Mauris sagittis nisi id aliquam lacinia. Vivamus finibus velit sed condimentum aliquet. Nullam in ante a erat lacinia semper. Curabitur pretium justo at leo maximus, quis dignissim nulla posuere. Donec eget consectetur neque, et mattis dui. Vivamus at mi enim. Nullam et nisi est. Nullam eget eros blandit, convallis odio eget, ornare enim.\nQuisque ultricies # Quisque ultricies tincidunt sem nec tincidunt. Aenean nibh diam, dapibus varius ornare nec, suscipit ut arcu. Integer ut elit sollicitudin, fermentum ipsum nec, tempus eros. Donec hendrerit facilisis maximus. Pellentesque eu mi ipsum. Vivamus diam tellus, varius sed dolor at, finibus tempus lorem. Morbi sed mauris quis enim vehicula hendrerit. Sed et sollicitudin est. Maecenas scelerisque ligula ac purus gravida, et feugiat nibh blandit. Integer id quam ac arcu convallis interdum eget sed libero. Aliquam varius est quis efficitur efficitur. Cras id turpis magna. Aenean cursus, libero auctor ullamcorper vestibulum, nisl risus consectetur nisi, ut molestie enim libero sed ipsum.\nEtiam sollicitudin # Etiam sollicitudin, ante ac fermentum varius, lorem ante congue mi, auctor dictum magna sem sed nibh. In et est id neque gravida aliquet quis a felis. Mauris tempor lectus ut gravida ornare. Curabitur at elementum tortor, in feugiat elit. Aenean auctor diam ut egestas rhoncus. Quisque tristique venenatis risus vitae suscipit. Nunc feugiat purus sed dolor gravida, non ullamcorper metus suscipit. Sed et tortor odio. Pellentesque at scelerisque nulla. In ut aliquam metus. Vivamus congue augue at pellentesque rhoncus. Donec a lectus tincidunt, aliquet libero sit amet, commodo arcu. Vivamus hendrerit quis augue eu lacinia. Sed sodales velit condimentum eros varius vulputate.\nProin tempor lorem # Proin tempor lorem quam, ac maximus lectus sodales et. Sed laoreet orci vel metus luctus lobortis. Nam ex velit, vehicula id tristique sed, blandit eu nisi. Quisque semper libero nec massa malesuada congue. In faucibus lorem at diam fringilla, vel viverra magna lobortis. Ut commodo est urna, ut aliquet enim sagittis ut. Nulla posuere arcu sed lobortis accumsan. Phasellus fringilla dolor id est lobortis feugiat. Quisque enim elit, faucibus a mauris non, mattis aliquet orci. Nunc sagittis viverra erat, id condimentum lacus suscipit quis.\n","date":"4 September 2022","externalUrl":null,"permalink":"/en/posts/post-lite-three/","section":"Posts","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Super cool article that I wrote","type":"posts"},{"content":" Lorem ipsum dolor sit amet # Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna. Nulla venenatis volutpat libero, in laoreet leo fringilla eget. Etiam consequat sed nisi sit amet interdum. Pellentesque ullamcorper at turpis in ultrices. Pellentesque et elit mauris. Aenean eu augue sit amet nunc interdum ultricies. Aenean eleifend consectetur sapien vitae consectetur. Donec risus mauris, finibus at condimentum at, lacinia sit amet neque. Nulla facilisi. Suspendisse sollicitudin dolor quis eros tempor, a tempus ex varius.\nNunc non leo non magna # Nunc non leo non magna ornare condimentum. Phasellus consequat nunc ut tellus porttitor bibendum. In pharetra ullamcorper metus quis mollis. Mauris bibendum, est in commodo hendrerit, dolor purus hendrerit dolor, at pharetra sapien erat sit amet ante. Etiam aliquet euismod libero, vel tincidunt felis mollis at. Sed scelerisque, tortor in convallis auctor, elit quam consectetur lacus, quis posuere risus libero non sem. Mauris sagittis nisi id aliquam lacinia. Vivamus finibus velit sed condimentum aliquet. Nullam in ante a erat lacinia semper. Curabitur pretium justo at leo maximus, quis dignissim nulla posuere. Donec eget consectetur neque, et mattis dui. Vivamus at mi enim. Nullam et nisi est. Nullam eget eros blandit, convallis odio eget, ornare enim.\nQuisque ultricies # Quisque ultricies tincidunt sem nec tincidunt. Aenean nibh diam, dapibus varius ornare nec, suscipit ut arcu. Integer ut elit sollicitudin, fermentum ipsum nec, tempus eros. Donec hendrerit facilisis maximus. Pellentesque eu mi ipsum. Vivamus diam tellus, varius sed dolor at, finibus tempus lorem. Morbi sed mauris quis enim vehicula hendrerit. Sed et sollicitudin est. Maecenas scelerisque ligula ac purus gravida, et feugiat nibh blandit. Integer id quam ac arcu convallis interdum eget sed libero. Aliquam varius est quis efficitur efficitur. Cras id turpis magna. Aenean cursus, libero auctor ullamcorper vestibulum, nisl risus consectetur nisi, ut molestie enim libero sed ipsum.\nEtiam sollicitudin # Etiam sollicitudin, ante ac fermentum varius, lorem ante congue mi, auctor dictum magna sem sed nibh. In et est id neque gravida aliquet quis a felis. Mauris tempor lectus ut gravida ornare. Curabitur at elementum tortor, in feugiat elit. Aenean auctor diam ut egestas rhoncus. Quisque tristique venenatis risus vitae suscipit. Nunc feugiat purus sed dolor gravida, non ullamcorper metus suscipit. Sed et tortor odio. Pellentesque at scelerisque nulla. In ut aliquam metus. Vivamus congue augue at pellentesque rhoncus. Donec a lectus tincidunt, aliquet libero sit amet, commodo arcu. Vivamus hendrerit quis augue eu lacinia. Sed sodales velit condimentum eros varius vulputate.\nProin tempor lorem # Proin tempor lorem quam, ac maximus lectus sodales et. Sed laoreet orci vel metus luctus lobortis. Nam ex velit, vehicula id tristique sed, blandit eu nisi. Quisque semper libero nec massa malesuada congue. In faucibus lorem at diam fringilla, vel viverra magna lobortis. Ut commodo est urna, ut aliquet enim sagittis ut. Nulla posuere arcu sed lobortis accumsan. Phasellus fringilla dolor id est lobortis feugiat. Quisque enim elit, faucibus a mauris non, mattis aliquet orci. Nunc sagittis viverra erat, id condimentum lacus suscipit quis.\n","date":"4 September 2022","externalUrl":null,"permalink":"/en/posts/post-lite-two/","section":"Posts","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean in eleifend justo, vestibulum congue lacus. Quisque est libero, lacinia sed placerat ac, interdum id urna.","title":"Super cool article that I wrote","type":"posts"},{"content":" 前言 # 雖然 Q1 都快結束了才在回顧去年好像動作有點慢 🤣 不過不管啦，這篇文章主要紀錄 2021 年發生的事情，可能會有點像流水帳，不過我還是有挑出進入業界後的幾個主題：心態調整、全端的重要性、強者姿態、新技術，有興趣就繼續看下去吧～\n進入業界 # 工作狀況 # 從 ALPHA Camp 畢業之後在 2021 年 1 月加入一間系統廠的雲端部門，正式開始了軟體工程師職涯，工作內容是 Node.js 後端開發，主要使用 AWS serverless 服務像是 Lambda 和 DynamoDB。而因為業務關係，另外兩大公有雲服務也有機會接觸到。\n這段期間認識了一位剛從大學畢業的同事 A，他早我三個月到職，雖然他是寫 Python，不過因為彼此都樂於分享資訊所以很有話聊。\n沒想到才過了一個多月，同事 A 就找到新工作決定離職了！雖然共事的時間很短，但還是有點不捨，畢竟也工作了幾年時間，知道要認識這樣的朋友是很講緣份的。\n同事 A 離職後我的工作內容有些變化，加上組織變動，開始感覺到這份工作跟我最初的期待已經不太一樣了，同時對於職涯發展也有其他的想法，好在自己有在平時下班時間把 Vue.js 和 Docker 課程看一看，便開始著手準備應徵前端及全端職缺。\n第一次跳槽 # 由於有跟離職的同事 A 保持聯絡且持續交流產業情報，大概在三月底的時候開啟履歷，\n同時也請他幫我內推前端缺，很幸運的有得到面試機會且最後順利取得滿意的 offer，耶～\n五月進入新公司，是一間香港本土電商，工作內容包括開發電商網站、二手拍賣網站、社群網站、後台網站、內部系統等等；使用的技術以 JavaScript, TypeScript 及 React.js 生態系為主。\n2021 下半年基本上就是在新公司邊做邊學，工作上用到許多過去沒用過的技術和工具:\n開發: TypeScript, React.js, Redux, Redux-saga, Next.js, Gatsby, Storybook, GraphQL, Tailwind, Ant-design, Jest, GitLab 專案: Figma, Jira, Confluence 一些感想 # 保持聯絡 # 對工程師來說人脈非常重要，如果有認識或能接觸到目標公司的人員，便有機會搶得先機，因為好的職缺可能在放到人力銀行之前就透過內推先招募過一輪，且能更了解目標公司，包含招募狀況、開發流程、薪資福利、管理風格等等資訊，相對於一般求職者會更有優勢。\n心態調整 # 能夠錄取就代表主管願意給我機會，相信我能夠把事情做好，所以本不本科這些事情就不需要再去想了，將冒充者症候群轉變為自信，現在的我就是一位軟體工程師，拿出應有的專業，不懂的東西趕快學起來就對了。\n全端的重要性 # 因為有在 ALPHA Camp 學過 Node.js 後端開發，對於 server-side, API 和 DB 有基本理解，在開發時可以很好的跟後端工程師合作，除錯時也都能夠很快的定位問題的根本原因。另外，有時會需要自己起一些開源專案，也可能會用到 server-side 或是 docker 等技術，加上近年來 server-side render 越來越流行，BFF (Backend for Frontend) 也是前端工程師必備的技能之一。\n強者的姿態 # 團隊中有幾位待過接案公司的同事，技術能力廣、開發速度快、學習能力強，整體工作效率很高，除了這些優點之外，他們還有一個共同點是：同樣都是前端工程師，但都對某個領域特別擅長，有 Git 大師，有 server-side render 大師, 有 TypeScript 大師等等，平時也都樂於協助大家解決難題或分享技術。\n對新技術抱持開放心態 # 隨著 BTC、ETH 價格大幅波動，加上 NFT 熱潮席捲全世界，2021 年可說是 Web3 元年。軟體圈唯一不變的事情就是一直在變，不管最後會是泡沫還是成為現實，這些新玩意兒都正在影響著整個世界。對前端工程師來說，從 Web2.0 進入 Web3 的這個 moment 切入區塊鏈領域或許也是個好機會。推薦一部我常看的工程師 Youtuber 介紹區塊鏈產業的影片。\n成為區塊鏈工程師要具備的能力？業界工作內容全解析！ | 在地上滾的工程師 Nic\n今年的目標 # 去年的目標是學習 React.js 並且能夠獨立作業，目前看起來是成功達標了，現在對於公司的開發節奏掌握度也足夠了，所以今年會給自己多一些新的挑戰。\n學習 # 對於軟體工程師來說學習是一輩子的事情，尤其學習技術是一定要的，而最佳的學習方式就是寫 Side project 和技術文章。今年最重要的事要把在新公司所學的技術自己玩一遍；再來是學 Solidity 來撰寫智能合約，做一些 Web3 相關的應用，跟上潮流；最後是學 React Native 來寫個 App。\n另外就是加強英文，有一句話是這麼說的：\n英文不行就像不會卍解一樣，掌握英文才能解放軟體工程師的所有力量\n這句話是出自一篇網路神文『 【密技】台灣軟體業業界現況詳解、軟體工程師指南』，雖然發文時間是 2019 年，但內文放到現在還是相當受用，我幾個月想到就會點開來重新回味。工程師的英文不用好到像是 native speaker，但除了閱讀能力之外也要訓練口說和寫作能力，至少要練到可以在面試中應答的程度。最近在上一個訓練口說的線上課程叫做『 史丹佛女孩』，教材內容很符合職場的需求，老師也有開臉書社團回答學生問題，滿推薦的，唯一的缺點就是網站有點陽春，不過不影響學習。\n妥善管理時間 # GTD 是最近接觸的一套時間管理系統，他的基本原則就是不要用大腦去記住所有事情，要善用不同類型的任務管理軟體來輔助自己，進而對時間作出最高效的運用。有興趣可以參考這篇文章 『什麼是 GTD (Get things Done)？建立一套完善的時間管理系統』。\n整理待閱清單跟看書 # 待閱清單已經堆的跟山一樣高了，要運用 GTD 把他們一個個整理起來。 之前買的書有《一流的人如何保持顛峰》、《原子習慣》、《刻意練習》、《從 0 到 1》、《OKR 做最重要的事》、《恆毅力》、《反脆弱》要馬沒看，要馬斷斷續續的看，這次要直接在一週內看完一本然並且寫成心得文，不然就算看完了，過幾個月就忘了，跟沒看一樣。\n就這樣，去年都沒發文，今年用一篇小小廢文當作開始，晚來總比沒來好，GOGO！\n","date":"2022 February 25","externalUrl":null,"permalink":"/posts/2022-02-25-year-reflection/","section":"Posts","summary":"2021 年發生的事情，可能會有點像流水帳，不過我還是有挑出進入業界後的幾個主題：心態調整、全端的重要性、強者姿態、新技術，有興趣就繼續看下去吧～","title":"2021–2022 回顧 | 轉職軟體工程師後的第一年","type":"posts"},{"content":" 前言 # 在今年八月底結束 ALPHA Camp 三個學期課程後即投入 A+ 人才計畫，該計畫旨在給參與者更上一層樓的機會，從 Junior 到 Junior+。這篇文章主要是記錄求職過程的心得，面試文請看 「轉職後端工程師 24 場面試全記錄」。\n求職規劃 # 由於距離上一次真正面試已經超過一年以上了，加上現在是以後端工程師為求職目標，我認為自己需要先練習一下，熟悉技術面試的內容與流程，因此把 104 找到的職缺(技能符合)大概分成三個 tier：\ntier 1: 很有興趣、具產業指標性的公司\ntier 2: 感覺普通、但不排斥的公司\ntier 3: 沒聽過、沒興趣的公司\n接著就是從 tier 3 開始投履歷了，剛開始一週投 10 間，但發現人家也不一定要找我去面試 😂，所以之後就是一週投 20+ 間，一週大概排 2~4 場面試。\n求職結果 # 我投了 100+ 間公司，獲得 24 個後端工程師職位的面試機會，總計得到 5 個 offer；過程中也有收到前端、PM 或 BD 的面試邀請，但我沒有興趣所以就婉拒了。\n求職心得 # 在 A+ 計畫中除了刷題跟個人專案之外，每週都有求職準備，像是求職目標、履歷優化、行為面試題擬答，以及一次模擬面試，基本上有跟著進度走，結訓時的狀態就是可以直接開始投履歷了。\n求職就像交男女朋友，你有意思，對方不一定有意思，反之亦然。也可能雙方都有意思，但因為其他外在原因就無聲卡或感謝函了，從投履歷到錄取的過程中，存在非常多的變數是求職者無法掌控的。\n過程中有些公司面試時感覺很好，最後得到的回應是員額有限或無聲卡，難免會有點懊惱，但靜下心來想，如果兩邊的都有一定的專業程度，那面試的過程本來就該是舒服的，最終錄取與否，還是回歸商業需求，這些都不是求職者能掌握的。(可參考 《面試相談甚歡，卻沒有被邀約第二次面試？》)\n結論，求職者能做的就是把自己準備好，全力以赴參與面試，面試結束了就放寬心，持續改善面試時發現的弱點，放眼下一次的面試；就像阿湯哥在明日邊界裡面一直死掉又一直重生，最後每個環節都熟悉了，就可以輕鬆闖到大魔王面前。(沒看過趕快 iTunes Netflix 找來看，艾蜜莉布朗超正的)\n(59) 【明日邊界】電影加長版官方中文預告，重裝上陣(HD) - YouTube\n經過了九個月的學習，以及三個月的求職，我的轉職之旅總算是告一段落了，這一年的心路歷程實在是很難用言語形容，在完成作業時感到心滿意足，但也伴隨著無數次的自我懷疑，會覺得這樣真的就夠了嗎？自己還可以做什麼？因此我選擇把每一份作業都做到最好甚至自己加需求；感覺自己撐不到最後，也還是選擇報名 A+ 計畫。\n轉職除了努力學習之外，很多時候也是在磨練意志力，因為沒有人能夠保證轉職成功，每個人的條件不同，對於成功的定義也不同，就算準備得再多，還是會覺得不夠，永遠想要裝載更多再上路，但其實永遠沒有準備好的那一天，唯有帶著這些懷疑一路走到最後，才會知道迎接你的是什麼。\n求職過程中也了解到自己不足的地方還很多，到職後要面對的是全新的挑戰，面試時主管也提到，在軟體圈唯一不變的事情，就是一直在變。希望自己成為工程師之後，依舊可以享受寫程式的樂趣，保持用技術解決問題的熱情，並讓技能樹與時俱進，永遠不要忘記自己是為了什麼而走到這裡。\n求職過程中的一些觀察 # 軟體人才需求真的很大 # 在我把 LinkedIn title 改成 Backend Engineer 之後，每天都有人造訪檔案，每週都有獵頭來建立連結，相較於前一份工作，三年只有一個獵頭找過我，產業的差距相當明顯。我的理解是獵頭的獎金是來自於被獵者最後談成的 package，因此獵頭多的產業除了有人才需求之外，薪資行情也是有一定水平，獵頭才有存在的意義。\n後端 or 全端 # 大部分公司雖然開的是後端職缺，但還是會希望求職者本身不排斥前端，工作內容也會是全端開發，所以前後端各掌握一個框架算是求職的基本配備了。前後端都掌握一個框架在求職上會更有彈性，因為前端的職缺真的多到爆炸，就算框架不同也有機會；後端職缺也很多，但因為有語言的區別，我看到的大多是 Java、C#、Python、Golang，而 Node.js 後端相對就比較少。\n技能深度 vs. 廣度 # 大部分公司比較在意廣度，例如在 AC 後端學的基礎是 Node.js、Express、MongoDB、MySQL、RESTful API、Socket.io、Git / GitHub / Git Flow，常被問有沒有這些經驗：單元測試、CICD、公有雲 AWS / GCP / Azure、TypeScript、容器化技術 Docker / Kubernetes、Linux、GraphQL；深度比較常被問到的是 MySQL transaction or index 概念及做法；或是除了用 ORM，有沒有直接下 SQL 操作資料庫的經驗，然後延伸到 JOIN，如果平常沒用就很難回答。\n溝通能力(協作能力) # 每一間公司都很注重 people skills，有問專案經驗的，例如遇到衝突或困難如何解決；有也出情境題的，例如手上有兩個案子都很急，會怎麼處理。這些問題其實沒有標準答案，會希望求職者回答實際的經驗，或是表現特定的人格特質：同理心、對事不對人、充分理解需求、主動回報前輩或主管等等。\n英文能力 # 大部分公司是問有沒有看原文文件跟技術論壇的能力，只有幾間電子業大公司會要求多益成績 or 當天上機考試。\n特別感謝 # 教練 Red, Yenting 在 A+ 計畫的過程中不斷鼓勵或鞭策我們，也在求職過程中提供專業建議及內推機會。\n講師維元在講解資料結構與演算法真的超專業，助教群 Shizuku、Eugene 在 office hour 解釋 LeetCode 作業時也相當用心。我覺得最有幫助的是課程中會點同學回答問題，或是說明自己的思路及解法，與講師或助教討論就像是面試時寫白板題與面試官互動一樣，透過這些練習，讓我在面試過程中可以表現得更好。\n我的個人專案 Mentor Wells 完全傾囊相授，讓我理解後端工程師是如何看待程式碼，在期末發表結束後也提供我非常實在且一針見血的建議，對我後續面試相當有幫助。我之前有寫一篇 Mentor 訪談，有興趣請看 「資深後端工程師訪談 — Wells」。\nAC 助教 PJCHENder、 Leo、Brian 及之前的同學 Tim 與我分享面試的經驗及軟體產業資訊。\n還有強者我同學們 T4、Henry、Danny、Harry、Carey，能跟大家一起學習，一起刷題，一起找工作，我感到相當榮幸，也從大家身上學到許多，不論是技術或是學習的態度，相信大家都能走出屬於自己的工程師職涯。\n同學們的轉職文都寫得超棒，分享在這：\n《關於轉職，我想說的是…》\n《轉職然後呢？成為工程師後，如何持續學習\u0026amp;開創職涯》\n《2020 第二次工程師求職紀錄》\n《轉職鬥士的航道！（完整長篇）》\n《轉職前端工程師紀錄》\n最後感謝家人及女友這段時間的體貼，偶而問問我的進度或狀況，但不會多做評論，這對於我來說就是最好的陪伴了。\n最後的最後，也要感謝自己，你真的走過來了，你很棒！\n想知道轉職之後的故事，可以看這幾篇文章\n2021–2022 回顧 | 轉職軟體工程師後的第一年。 2022–2024 回顧 | 轉職軟體工程師後的第二、三年。 ","date":"2020 December 29","externalUrl":null,"permalink":"/posts/2020-12-29-2020-career-change-reflection/","section":"Posts","summary":"在今年八月底結束 ALPHA Camp 三個學期課程後即投入 A+ 人才計畫，該計畫旨在給參與者更上一層樓的機會，從 Junior 到 Junior+。這篇文章主要是記錄求職過程的心得，面試文請看「轉職後端工程師 24 場面試全記錄」。","title":"2020 轉職後端工程師心得","type":"posts"},{"content":"","date":"2020 December 29","externalUrl":null,"permalink":"/tags/alpha-camp/","section":"Tags","summary":"","title":"ALPHA Camp","type":"tags"},{"content":"","date":"2020 December 29","externalUrl":null,"permalink":"/tags/bootcamp/","section":"Tags","summary":"","title":"Bootcamp","type":"tags"},{"content":"這篇只是面試文，面試過程中也參考了許多網路分享，現在輪到自己來回饋了，對於求職心得有興趣請看 《2020 轉職後端工程師心得》。以下面試的職缺都是後端工程師，或軟體工程師但職務內容是後端，語言以 Node.js 為主。\n方舟智慧 做 3D 及 VR 影像，因疫情關係，想帶著既有技術跨入電商領域，正在建立網頁工程團隊，工程師由做 UI 也會寫 code 的產品長負責招募跟管理，面試我的是產品長跟營運長，公司員工多數有創業經驗。 面試時間：2.5 hr 面試結果：offer 面試問題：覺得公司在做什麼、有做過電商金流串接相關嗎、為什麼想轉工程師、PM 經驗對你的幫助或優勢、有跟前端合作的經驗嗎、全端開發跟前後分離差別、個人專案花了多久時間 學思行數位行銷 經營讀冊生活 TAZZE 二手書交易平台，老闆是博客來的創辦人，因為在博客來的際遇被媒體稱為台版賈伯斯。老闆在博客來佔了快一半的股份，博客來滿賺錢的，所以公司資金來源很充足。 現在的網頁是主管以前在接案公司幫老闆開發的，由舊團隊維護(Java)，主管是年初回台加入讀冊，負責招募新團隊要做新版本的網頁，前端 Vue，後端 Node.js，會加入老闆一直想做的內容營銷功能。 面試時間：40 min 面試結果：offer 面試問題：作品集、為什麼喜歡做後端、PM 經驗、AC 助教、AC 學習狀況、專案複雜的東西很多，有沒有同時 handle 複雜任務或事情的經驗 DotZero 達易智造 永進機械(70%)和研華(30%)的合資公司，營運跟永進，行銷跟研華，兩邊都會餵客戶過來，主要業務是協助客戶的工廠數位轉型，讓客戶可以監控並優化整體設備效率（Overall Equipment Effectiveness，OEE）。 主管以前在廣達當後端工程師，有推出過下載量幾百萬的 App，之後去了區塊鏈新創，加入達易是透過朋友介紹。管理風格偏向自由，事情做完就走，沒有硬性要求加班。前端 React，後端 Node.js 跟 Go，已經開始慢慢把 Node.js 改寫成 Go，資料庫 pg 架在 Azure。 面試時間：1.5 hr 面試結果：無聲卡 面試問題：PM 經驗、作品集、討論作品後端架構、會排斥做前端嗎、AC 助教、AC 學習狀況 恆昌盛電子商務 公司名稱很容易跟昇恆昌搞混 XD，本業是協助亞馬遜賣家行銷產品到全世界，有一些固定的大客戶，工程團隊原本是做內部用的工具，之後發展新產品，從亞馬遜後台拉數據，以此為客戶創造價值。有請主管讓我看新產品的樣子，UI 很漂亮有質感 👍 面試時間：2.5 hr 面試流程：RD + HR ➡️ 測驗 ➡️ 老闆 + PM ️ 面試結果：無聲卡 面試問題：PM 經驗、前公司的文化、偏好的產業、有投哪些公司、目前投的職缺都是後端嗎、AC 學習狀況、如果去問前公司的同事你的優缺點，會得到什麼樣的答案、有偏好大公司或小公司嗎、你覺得大公司跟小公司 對個人來說有什麼差別、如果大公司跟小公司都能同時達到你要求的點，那你會怎麼選擇、以轉職者來講，你有什麼優勢、情境題 圍棋人科技 線上圍棋對弈平台，主要用戶是小孩，有 AI 工程師開發 AI 可以跟小孩下棋，也有進階功能可以分析，幫助用戶精進下棋的技術。老闆據說曾是台灣圍棋最強段數的人。前端 Vue，後端 Node.js + DynamoDB。 面試時間：2 hr 面試流程：HR ➡️ 主管 面試結果：感謝信 面試問題：對公司的理解、作品集、cookie 跟 JWT 兩個驗證機制的優缺點、Express middleware 的概念是什麼、middleware 會用在哪些地方、SQL 跟 NoSQL 差別、SQL 跟 NoSQL 效能瓶頸在哪裡、為什麼以前用 SQL 現在流行 NoSQL、運算資源(CPU)跟儲存資源(硬碟)的演進對於資料庫選擇的影響、知道資料庫正規化嗎、什麼是反正規化、白板題(跟公司產品有關) 大牛科技 辦公室在微風信義 35F ，很高級。先寫考卷(40mins)，考題算滿難的，包含：sort、物件導向、callback hell、Buffer、Stream、Node.js 非同步運作原理、graceful shutdown、Memory leak、分散式系統、可用性(Availability) 、容錯分區(Partition tolerance)、一致性(Consistency)、微服務。 面試時間：2.5 hr 面試流程：HR ➡️ 主管 面試結果：無聲卡 面試問題：作品集、情境題 和泰聯網 Toyota 總代理和泰汽車全資子公司，做 MaaS。舊的產品 abc 好車網已經轉給集團其他事業體負責，目前在做 yoxi 叫車服務平台 + 紅利點數平台，目標是達到集團綜效，例如叫車服務得到的紅利點數可以折抵汽車保養費用。工程團隊約有 10 人包含 infra、前端(React)、後端(.net)，要再找兩個 Node.js 後端，有些外包的系統是用 Node.js，與外包商合約到期後要接回來維護。 面試時間：1 hr 面試流程：主管 面試結果：感謝信 面試問題：Node.js 如何處理非同步請求、作品集 悠福科技 網路廣告相關的公司，與創辦人電話面試約 30 分鐘，前面主要是要了解求職者的背景及求職方向，之後就開放提問。 研發團隊有 40 人，前端缺偏全端，可以接受 Jr.；後端職缺是純後端，需要理解架構設計、實作演算法資料結構等等，屬於 Sr. 職缺。 面試結果：感謝信 技嘉科技 工作內容是維護內部 ERP 系統，除了辦公室，工廠端也會使用這套系統，瀏覽器會需要支援 IE。先上機考試，然後針對考試內容討論，接著進入履歷問答。前端 JSP，後端 Node.js，有考慮改用 Vue。 面試結果：感謝信，薪資無法符合要求 91APP (Infra) HR 主動邀約，單位是 Infra team，針對履歷及作品集問了一些問題之後，就讓求職者發問，最後問期望薪資時，會問面試者的期望薪資是怎麼決定的。 面試時間：1 hr 面試流程：主管 面試結果：感謝信 91 APP (後端開發) 這次是我自己投的，由於公司使用的語言是 C#，會被問為什麼要投這個職缺、未來如何規劃學習 C# 體系的技術等問題。接著聊作品集，聊完就考白板題，要依據需求畫出資料庫的 Table。最後會問情境題，例如手上有兩個很趕的案子，如何取捨。由於白板題我答的不太好，主管提出線上考題邀約，使用的語言是 C#，進行的方式是先做題目一部分的需求，自己決定時間需要多久。如果有符合標準，會進行線上面試，這次要現場做出第二部分的需求。 面試時間：1.5 hr 面試流程：兩位不同單位的主管 面試結果：放棄考題邀約 PicSee 短網址服務新創，先線上填寫徵才問卷，內容是要了解面試者的想法，都是 culture fit 的常見問題。 面試結果：感謝信 米蘭營銷 HR 電話面試約 15 分鐘，主要是了解求職者的意向，為什麼投這個職缺、求職方向、期望薪資 面試結果：無聲卡 名留國際 美髮生醫集團，IT 研發部門由董事長特助直接管理，主要做內部系統 ERP 以及給店家使用的 POS，因為美髮業的分潤很複雜，所以 POS 花了很多心思在這塊。近期在準備做電商，也包含短網址等 Data 相關的系統。前端 React，後端 Node.js，對外用 RESTful，對內用 GraphQL。 面試時間：1 hr 面試流程：主管 面試結果：無聲卡 面試問題：作品集、GraphQL、會排斥寫前端嗎、資安相關 XSS, SQL Injection 精英電腦 (AIoT) 主要做車聯網相關，客戶是大型車的公司，也有做電動車充電樁相關，以及國際貨運追蹤相關的業務，滿多元的。 面試時間：2.5 hr 面試流程：HR ➡️ 部門同事 + 專案同事 ➡️ 主管 + 部門同事 面試結果：無聲卡 面試問題：PM 經驗、車聯網專案經驗、作品集、轉職的原因、會排斥寫前端嗎 景宜 客戶多為銀行保險業，產品 WEBA 讓客戶可以快速產生活動網頁，使用方式和 WIX 很像。會需要到客戶端裝機，並且教客戶如何使用，也需要跟客戶端協作，排除環境相關的問題。產品是買斷性質，主要收入是售後的維護費用(包含新功能開發) 面試時間：1 hr 面試流程：主管 + 部門同事 面試結果：感謝信 面試問題：作品集 LINE TV 巧克科技 Sr. 職缺，會給一週時間做前測，題目不難，適合火力展示。 自我介紹，然後針對履歷提問，例如轉職的原因。作品集有實作一些架構面技術，在 demo 後面試官有深挖並延伸問題。之後開始針對前測提問，要運用白板回答：解釋自己寫前測題目的流程 、解釋前測題目用到的技術架構及實作過程、目前的架構在大流量情況下，瓶頸會在哪，要怎麼解決、目前的架構會有什麼安全性問題，要怎麼解決、假設遇到廉價的駭客攻擊(10 個 DNS)，要怎麼防禦、會點出前測寫的程式碼某個區塊有問題，要在該區塊 debug、如何實作 error handling 避免 stack 露出、JS 是一個弱型別的語言，有些 bug 在 production 時才會發現，要怎麼避免、經過剛剛這些討論，你會怎麼改善 (算是在看面試者對於前面討論多種解法的統整能力)。為什麼喜歡後端？想走後端，還是全端 (比較像是在聊天，Team Lead 分享了他對於後端全端在職涯發展上的看法)。 Team Lead 說我寫的 code 整體看起來滿舒服的，提醒大家 coding style 跟排版平常就要養成好習慣。最後 Team Lead 問我要今天面 HR 還是下次，就直接去跟 HR 討論了。 十分鐘後面 HR，他會很認真的聽並且針對你講的內容延伸提問，是真的要了解你這個人，不只是形式上的流程而已，目前為止這是我遇過最專業的 HR。 面試時間：3 hr 面試流程：Team Lead + RD ➡️ HR 面試結果：感謝信 如影優活 母公司是醫材製造商，有藥妝店通路，子公司做醫療物聯網。主管有一份很詳細的簡報，會快速帶過讓求職者大概了解現有的服務及產品。公司有一個特別的規定是每週都有一天晚上需要參加會議。 面試時間：1.5 hr 面試流程：主管 面試結果：無聲卡 面試問題：知道公司是做什麼的嗎、作品集、自己評估 Express 的文件看了多少 亞旭電腦 近年新成立的團隊，主要做車聯網應用，這是純後端職缺。後端主服務用 Node.js，使用 AWS Serverless 服務 API Gateway、Lambda、DynamoDB 等技術，數據分析用 Python。團隊有上過 AWS SUMMIT 及 This is My Architecture。 面試時間：1 hr 面試流程：HR ➡️ 主管 面試結果：offer 面試問題：為什麼轉職、PM 經驗、作品集、對於學習新技術的想法、優缺點 學悅科技 開發教育產品 ZUVIO，準備跨入媒體，先寫考卷，再由 CEO 面試， 考卷內容大概是：一個 ZUVIO 產品實際解決的課堂問題，要寫出解決的方法及相關想法、SQL、JS 演算法。CEO 人很好，沒寫出來的會讓我講想法，講完換他講他的解法。 面試時間：1.5 hr 面試流程：CEO 面試結果：無聲卡 面試問題：作品集、會排斥寫前端嗎 禾場國際 經營禾場國際芳療學苑，經營狀況穩定，想要重新打造內部系統並建立新的會員服務，目前使用的電商系統是 Cyberbiz，長遠的目標是連電商系統都自己做。 面試時間：1 hr 面試流程：主管 面試結果：無聲卡 面試問題：作品集 緯創資通 近年新成立的團隊，做硬體開發人員使用的系統，高層相當重視，有兩個團隊分別在汐止及高雄。先考 JS 及 SQL 白板題，然後履歷問答。 面試時間：2.5 hr 面試流程：主管 + 兩位同事 面試結果：感謝信 仁寶電腦 做 5G 基地台相關，缺開在現有硬體團隊裡，用 Prometheus 做儀表板，後端會用到 influxdb，開發語言沒有限制，前人用 Go。 面試時間：2 hr 面試流程：主管 + 同事 面試結果：offer 信威科技 開發資安套裝軟體，客戶都是電子大廠，經營狀況穩定。團隊人數相當精簡，公司流程及制度聽起來很完整。 面試時間：1 hr 面試流程：CEO + 主管 面試結果：offer 面試問題：作品集、session 跟 token 差別、RESTful API ","date":"2020 December 29","externalUrl":null,"permalink":"/posts/2020-12-29-24rounds-backend-engineer-interviews/","section":"Posts","summary":"這篇只是面試文，面試過程中也參考了許多網路分享，現在輪到自己來回饋了，對於求職心得有興趣請看「2020 轉職後端工程師心得」。","title":"轉職後端工程師 24 場面試全記錄 — LINE TV/91APP/和泰聯網/緯創/仁寶/技嘉/精英/亞旭","type":"posts"},{"content":"","date":"2020 October 11","externalUrl":null,"permalink":"/tags/rolemodel/","section":"Tags","summary":"","title":"RoleModel","type":"tags"},{"content":" 前言 # 因為在 ALPHA Camp 擔任實習助教的緣故，有機會來聽 CakeResume 舉辦的職涯探索講座，這次講座的主題我一看到就覺得熱血又帥氣：\nOne Way Ticket. My Journey to Instagram.\n同時也讓我想起一句廣告台詞：\n不放手，直到夢想到手。\n以下內容除了演講中的內容，也包含演講後的討論。\n講者的背景 # 講者 Jacky 大學主攻電機工程 ，靠著 3 個月的自學和積極態度，在毫無相關工作經驗的情況下取得了第一份軟體工程師的 offer ，成功進入 KKBOX；之後一路過關斬將進入國際級軟體企業 9GAG、Facebook、Instagram。\n這次演講共分為五個部分\n如何自學成為一位 iOS 工程師 從一張飛往矽谷的單程機票開始的冒險 Facebook 與 Instagram 的工作樣貌 在四座城市間流轉的職場觀察與心得 自律與自由並存的生活哲學 如何自學成為一位 iOS 工程師 # Jacky 首先介紹了自己的背景，他在台灣出生，高中時移民到美國加州，去了一陣子就發現，很多華人已經去了五年甚至十年以上，但英文程度還是很差。因此他警惕自己，要跳出舒適圈，融入當地的環境，英文才會進步。\n大學念的是電機工程，學生時期多在主持社團活動，畢業後準備求職時發現硬體相關工作要求碩士學歷，但軟體相關工作僅需學士學歷，薪水就是硬體的兩倍。\n後來 Jacky 因家人健康問題舉家搬回台灣，回來後馬上就遇到了兵役問題，等待期間 Jacky 在 iTunes 學習 iOS 開發課程，該課程其實就是 Stanford 的課程。\nJacky 當完兵就開始面試，作品集很普通，只做出了一些小遊戲像是摋骰子，剛開始在 104 投履歷都沒回應，之後改變策略，投完履歷就打電話給 HR，接到電話的 HR 都滿訝異的，不過還是有協助安排面試，就這樣最後面到 KKBOX，儘管 Jacky 是個初學者，主管還是願意給他機會，他認爲是積極的態度幫助了自己。Jacky 在 KKBOX 待了快兩年後，決定離開舒適圈，第二間公司是香港社群媒體公司 9GAG，但因為不習慣當地生活環境，短短三個月便選擇離開。\n從一張飛往矽谷的單程機票開始的冒險 # Jacky 深知自己心中依然掛念著加州的生活環境與工作氛圍，一心想回到矽谷，因此抱著破釜沈舟的決心，沒找到工作絕不回家，買了張單程機票，便飛往矽谷展開世界級軟體公司的面試之旅。\nJacky 剛開始在矽谷面試，面了幾間就發現面試與實際開發所需要的技能其實差很多，甚至無關。因此開始加強面試技巧，Leetcode 刷了約 70 ~ 80 題。面試久了就越來越順，Jacky 最後在 Facebook 和另一間 startup 之間抉擇，startup 的 offer 比較好，因此 Jacky 拿來當作跟 Facebook HR 談判的籌碼，HR 的態度當然就是表達 Facebook 公司本身比 startup 好，因此 offer ㄧ就是這樣。到了 Facebook 的 deadline 時，Jacky 再次表達自己的期待，HR 聽了之後還是堅持 offer 就是這樣沒得談，Jacky 便直說：「那我就真的不要了，謝謝你的時間\u0026hellip;」，此時 HR 才妥協。\nJacky 成功得到自己期望中的 offer 了。\nJacky 給求職者的建議 # 非常推薦 Leetcode 的付費功能，會有不同公司的面試考題，Jacky 直言對他幫助非常大，面試前一天也會把這些題目都再快速看過一遍。 Leetcode 刷題刷再多，沒去實際面試都沒有用，自己一開始遇到白板題也是腦袋一片空白，所以都面試不上。因此多面試多練習，累積經驗非常重要。 非本科剛開始刷題遇到 Linked List、Tree 等題目也是會覺得很頭痛，但為了面試就是不論如何都要學起來。同時也非常推薦 Cracking the Coding Interview 這本書。 面試需要規劃，先找練功公司，隨著面試經驗越來越豐富，再開始投真正想去的公司。 某間公司若給出較好的 offer，會是和其它公司談判時最好的籌碼，也讓自己更有底氣。 Facebook 與 Instagram 的工作樣貌 # Facebook # Facebook 會讓剛加入的同仁參加內部的 Bootcamp，在 Bootcamp 期間可以自由參與公司的任何一個 team 例如 iOS, Android, server, web 等等，最後加入了 Messenger。\nJacky 坦言自己在當時曾有冒牌者症候群（Imposter Syndrome)，為此在過程中請教了不同 team 的同事，同事不約而同地告訴他這很正常，所以自己也開始慢慢克服。\n剛加入 Messenger 是負責做新的 Messenger feature，後來因為一些外在原因這個專案跟 team 一同被砍，因此 Jacky 需要在公司內部為自己重新找到一個位置。\n當時矽谷 Facebook 都沒有缺，但紐約 Instagram 有，Jacky 考量矽谷上下班塞車的狀況，紐約交通問題相對沒那麼嚴重；紐約產業類別豐富，矽谷則是科技業為主，連晚上到酒吧都會聽到有人在討論 coding；紐約的生活費較高，感覺留在那裡的人都有特別的能量與態度，渴望跟那邊的人切磋。因此 Jacky 在進入 Facebook 幾個月之後，決定前往紐約 Instagram。\nInstagram # 之後在紐約 Instagram 就一直待到現在了，在將近四年的時間裡，Instagram 的 feature 幾乎大部分都已經做過了(如上圖)，所以也接觸過很多不同的 team。\nInstagram vs Facebook # Instagram 功能上比較獨立，也比較簡單，沒有太多複雜的功能。因此開發上也比較嚴格、不自由，每個新的 feature 都要考慮很久，考慮的點像是使用者體驗，或是擔心會影響到既有生態系。\nFacebook 功能就很多且複雜，甚至有點凌亂。好處是開發上比較自由，新的 feature 想做就做，比較不會被限制。\n兩間公司相同的是工程師的職責，兩間公司的工程師需要負責的 code base 都很大，但寫程式只是工作中的一部分，在 feature 開發上也是由工程師主導，過程中會要與 PM 及資料工程師合作，因此整體工作強度非常高。\n在四座城市間流轉的職場觀察與心得 # 大公司的好處與壞處 # 大公司的好處很多，像是薪資福利，公司 scale 夠大，user 夠多，有足夠的 data 等等。壞處則是：\n技術陳舊，Jacky 以自己為例，Instagram 在 iOS 開發上還是使用 Objective-C，直到今年才開始「準備」使用 Swift。 職務切分很細，沒辦法接觸不同的平台。 工作量(code base)很大。 東西方文化差異 # 在美國工作，整個 team 會一起討論要做什麼，主管與 PM 給的是大方向，實際上 feature 是由工程師想出來的。也就是說除了寫 code 還要想 feature ，這樣的工作模式雖然比較累，但也比較有參與感，在實作時會比較有動力。東方文化多半是老闆說了算，工程師只要乖乖執行就好。\nJacky 順著帶入學生時期在課堂上的狀況，東方個性就是比較安靜，問問題時沒有人要回答，或是遇到問題沒想好不敢回答；但西方會是大家搶著回答，也常會邊講邊想，基本上就是有 idea 就講。\n同樣的在職場，主管打考績時，會希望工程師除了寫程式之外，也要會溝通，有想法，話少的人會被懷疑是不是能力不足。因此這樣的個性在職場上會是劣勢， Jacky 也會逼自己要多講，多表達自己的想法，以避免自己想了老半天，才發現都被別人講完了。\nJacky 分享在 Instagram 時曾與團隊成功完成了提高 hash tag 體驗的專案，但會讓廣告收益下降 0.0x %，因此這個專案還是被砍掉了。Jacky 直言當時要把自己花半年寫的 code 全部砍掉，心裡難免會有負面情緒。之後變得比較成熟了，會客觀的看待這件事，過程中也經歷過一些前輩開導，例如\nFall in love with problem, not your solution.\n這句話代表了 senior 的特質，對待自己寫的 code 就是「不好就砍」，沒有一絲猶豫。\nOccam’s Razor 簡約之法則 # 越簡單的 solution 越好，因為假設越多越可能是錯的。Jacky 自己在遇到一些很複雜的 feature 時，會思考到底為什麼要做這麼複雜，有沒有更簡單的 solution？你想要解決的問題，是真正的問題，還是因為你的想法使它變得複雜而造成的問題？例如程式的架構沒有切割好，如果架構設計得好，應該是每一塊都很精簡、簡單，把複雜的問題切割成小問題，一個個解決，最後組合成大問題的解答。應用在產品上，沒在用的 feature 就砍掉 這樣產品才能盡量保持簡單。\nSoft Skills # 最強的工程師都不只是會寫程式而已，還很會溝通。因為做一個 feature 需要在內部要資源、測試、解釋結果、說服 team 或其他可能被你的 feature 所影響到的 team 等等。這種工程師都有很快做出 prototype 的能力，然後直接帶著 prototype 問你的意見怎麼樣。除了口語溝通之外，寫文件也很重要，好的文件要在你出來解釋之前就讓別人看得懂。\n很多事情發生不是你的錯，但完完全全是你的責任，例如別人不小心把你的 feature 弄壞了，你可以生氣的怪別人，也可以思考怎麼讓你寫的 code 更安全，怎麼把測試寫得更好，讓別人不能那麼容易破壞自己的 code。 又或是隊友動作比較慢，自己是不是可以 support 他，或調動其它資源，而不是只是去怪罪他。 又或是想要升遷，沒有成功當然可以怪主管，但也可以想想是不是沒有向上管理，也沒有問過主管，想要升遷需要做到哪些事情。 這樣思考的好處是自己會更有責任感，也讓其他人更樂意與你合作。\n談到升遷，Jacky 也分享了自己的例子：公司的規定是 L3 兩年內沒上 L4 就 fire，L4 兩年內沒到 senior 就 fire，所以自己剛開始為了升遷就狂寫 code，有 feature 都留給自己寫，從公司的數據看出自己真的寫了最多 code ，當時認為升遷一定沒問題，結果沒有成功升遷。因為能不能升遷跟整個 team 有關係，當時自己悶著頭寫 code，但團隊本身的表現並不好。所以學習到有 feature 也可以留給別人做，不能只顧到自己，整個 team 好，自己才有價值。\n自律與自由並存的生活哲學 # Jacky 強調工作只是生活的一部分，invest habit 也是很重要的。\n很多時候你不會，就沒有機會，所以需要假裝自己會，然後邊做邊學。\n賈伯斯演講的名言，Jacky 分享到大學剛畢業時，當時在美國生活很順遂，突然回到台灣，環境變了，朋友都沒了，當下其實很難過。但現在回想起來，沒回台灣也不會自學 iOS，也就沒有現在的自己。當時的挫折就是一個 dot，最後成就了現在的自己。所以現在的想法就是每天都把該做的事做好，自然就會走向對的地方。\n「反脆弱」，是該書作者創造的「脆弱」的相反詞，意即遇到碰撞會越來越強。Jacky 表示當初自己覺得很挑戰的事情，例如轉職、到矽谷找工作，現在回頭看，就會想要怎麼用反脆弱的態度去面對。\nJacky 的習慣是每天五點起床，為的是訓練自己的意志力和毅力，同時他也認為清晨是最珍貴的時間，因為大家都還在睡覺，社群媒體不會有人敲你，自己也就比較不會分心。Jacky 的流程通常是健身、洗澡、吃早餐，接著八點進辦公室，直到十點同事開始陸續進公司時，Jacky 已經把自己該寫的 code 寫完了，可以做其他需要與別人溝通的工作。\nJacky 也舉了兩個簡單的例子：做簡單的決定，會讓之後的人生更難，像是吃不健康的食物、都在看電視不運動，那身體就會變差；相反的，做很難的決定，就有很簡單的人生，例如吃健康的食物、出門運動，就會有健康的身體，可以應付人生的各種挑戰。\n這邊 Jacky 分享了 0.01 法則，每天進步一點點，一年累積下來就不同了。 他認為訂目標其實沒有效率，因為做完這個目標，遇到下個目標時你的習慣可能變了。因此養成好的做事習慣比較好，不管是遇到什麼樣的目標，你都會用同樣的標準去達成。\n效法偶像 Kobe Bryant，自己唯一需要比較的是昨天的自己，永遠都要做一個最好的自己。\n這段 Jacky 分享了自己克服恐懼的方法，他選擇去做一件非常可怕的事情：在輕型飛機飛行時，從駕駛座爬出來，站上機翼！這段影片讓大家看得目瞪口呆，我也看到忘了記錄下來 XD\nQ\u0026amp;A # Q：有沒有遇過新的 feature 在 planning 或執行過程中，覺得不該被執行，可能是自己覺得可以別人覺得不行(或相反)的經驗嗎？你是怎麼去面對的？\nA：這其實常常發生，首先要知道，這些想法其實都是主觀的，所以可能討論半天無法說服彼此，最好的方法是看數據，資源足夠的話，就把兩個人的想法都做出來測試，數字會說話。如果資源不夠，那就需要往上層找 PM 或是再往上找 VP 一起溝通。我曾經偷做 public save list 的功能，但 VP 並不覺得好，所以沒有成案，這證明了溝通很重要，除了 feature 本身好，還要能說服 VP。對我來說，至少自己 try 過了，那種經驗還是很棒的。基本上一個成熟的工程師就會知道自己的想法不一定都是正確的。\nQ：剛進 Facebook 有 bootcamp 可以玩不同領域，請問 Jacky 跨領域時該如何做選擇？\nA：如果我能回到過去，會想多學 server，因為這跟我目前做的相比是完全不同的世界，像現在因為不會 server ，所以遇到 server 相關的問題就要等 server engineer，那自己的工作會被 block 掉，這時候就希望自己會 server。\nQ：做 feature 產生的過程是什麼？\nA：以搜尋功能為例，先定義出目標：怎麼樣是好的搜尋？然後有了目標要怎麼測量？再來可能會思考 UI 可以怎麼設計，讓 user 更容易去點擊，例如加入 story 的搜尋結果\u0026hellip;。當然也會有多個方案需要抉擇的時候，這時會找 Data scientist 去計算和預估每個方案做下去的代價，通常是選擇最大成效且資源最少的方案，再找 PM 一起討論。\nQ：會跑 scrum 嗎？\nA：Scrum 以前很流行，但是現在我待過的 team 都沒有在用，我認為是因為如果有兩個 project，那不就要在兩邊的 scrum 跑，這樣其實很累也沒效率。所以我會讓 team member 自己規劃哪時候需要討論或報告。\nQ：Jacky 是非本科系出身，在工作經驗兩三年的狀況下，你覺得自己讓 Facebook 錄取的原因或特質是？\nA：運氣好 (笑 我分享一下自己面試的經驗，我每次面試完都會反省，自己哪邊沒講好、哪題沒寫出來、哪邊緊張\u0026hellip;。面試時不只要會寫題，還要會溝通，如果白板題都在思考題目，一句話也不講，那對方會以為你只會寫程式但不會溝通。所以在面試時，寫題目之前要解釋自己打算怎麼寫，以及為什麼要這麼寫。再來是刷題刷得很熟是基本，更重要的是要實際面試，訓練自己溝通的能力。 自己剛開始面試也是很沒自信，後來面試久了就開始有自信，臉皮開始厚 (笑 最後問問題時也會問面試官是負責做什麼產品，面試官通常都會很喜歡聊自己做的產品。\nQ：Jacky 每天五點起床，前一天是幾點睡？怎麼控制自己的工作和生活時間？\nA：我都盡量十一點左右睡，其實是因為發現自己在那段時間通常沒什麼生產力，都是滑手機，覺得很可惜，有點浪費時間，所以不如早點睡，讓明天的行程可以早點開始。剛開始起不來不要氣餒，至少你已經開始嘗試了。可以考慮跟別人約清晨運動，這樣就比較不會賴床；也可以每次起床都 po 上網，讓別人知道，這樣別人就會問你早起做了些什麼事情，之後你會不想讓別人失望，也因此讓自己更有動力持續下去。再來是剛起床意志力弱，東找西找很容易就想放棄倒頭繼續睡，所以我會先把運動裝備準備好，一起床就直接穿上不需要思考，讓自己沒有懶惰的機會 。(編：感覺就跟當兵一樣)\nQ:想問 Jacky 是什麼時候開始刷 Leetcode，刷的方式是？\nA:其實我是到了矽谷才開始刷題，因為實際面試了之後才知道會考這些題目，需要刷題準備，推薦買 Leetcode premium 專門刷你要面試的那間公司的題目，還有要看 Glassdoor interview question。我的方法是面試前一天把所有題目複習一遍，因為題目刷多了就會發現其實大同小異，因此面試的實戰經驗比較重要。\n如果想知道更多關於 Jacky 的消息或欣賞他鏡頭下的美景，可以追蹤他的 Medium、 Instagram 和 Jacky Wang Photography 📷\n心得 # 近年在網上瘋傳的 FAANG 天價薪水跟面試流程，總讓人感覺裡面的員工肯定都是天才。但是我從 Jacky 的分享中了解到成就背後的自律、努力與不願安逸的態度。就算這些大公司的員工真的都是天才，也絕對是相當努力的天才。\nJacky 精采的演說及分享，讓我得以重新檢視自己學習的方向及態度，問問自己，你真的夠努力了嗎？這樣就是極限了嗎？真的沒有別的方法了嗎？其實還差得遠呢。\n寫到最後我想起一句話，很適合形容 Jacky 五點起床的習慣，與他現在的成就\nIt’s what you do in the dark that puts you in the light.\n期許自己也能效法 Jacky 的人生哲學，活出最好的自己！\n","date":"2020 October 11","externalUrl":null,"permalink":"/posts/2020-10-11-jacky-wang-at-instagram/","section":"Posts","summary":"講者 Jacky 大學主攻電機工程 ，靠著 3 個月的自學和積極態度，在毫無相關工作經驗的情況下取得了第一份軟體工程師的 offer ，成功進入 KKBOX；之後一路過關斬將進入國際級軟體企業 9GAG、Facebook、Instagram。","title":"轉職工程師經驗分享 — Jacky Wang @ Instagram","type":"posts"},{"content":" 前言 # Wells 助教是我在 ALPHA Camp A+計畫的 mentor。Wells 在轉職工程師之前曾任客服中心主管，而且當時就開始自學程式了，從 ALPHA Camp 大航道課程畢業後，順利進入 微碧愛普科技擔任後端工程師，擅長 Ruby on Rails 及 JavaScript。 訪談內容包含了 Wells 助教現職、轉職的經驗以及給轉職者的求職建議，以下訪談內容是用第一人稱及一問一答的方式呈現，盡量保留原話的意思。\nhttps://weiby.tw/\n現職 # 我：請問 Wells 目前公司的架構及擔任的角色是？\nWells：我們是一間小公司，組織架構扁平，以做自己的產品為主，職務劃分沒有那麼明確，基本上碰到問題就是要自己解決。 工程團隊大概是 App 2 人、Web 4 人，Web 有 2 個前端 front，2 個後端，通常一個人會負責 1~2 個專案，不過我們的後端其實是當成全端來做，我的職責是開 API 、部署還有客服。\n我：開 API 的工作流程是？會有 API 文件嗎？\nWells：在實際寫 API 之前會先看 UI\u0026amp;UX、wireframe 需要哪些資料，並跟前端討論，看他希望畫面怎麼動。 畫面操作時可能有好幾個動作，但可能可以共用同一支 API，這些都需要經過討論才會知道。 再來就是資料的需求，例如註冊帳號要驗證電話，會需要簡訊驗證碼，那這個服務國外能不能使用？可以使用就需要國碼，資料結構也就不同。基本上都是先了解前端的需求後，再去思考要怎麼做，最後寫完 API 後直接用 Postman 產出 API 文件。\n我：那部署的部分呢？\nWells：部署不外乎就是寫腳本、CI/CD 及自動化部署。我們公司的服務原本是使用 AWS EC2，之後改成 AWA ECS，也就是用 Docker 來做。 剛開始專案規模小，用戶不多也就沒有大量 request 處理的問題，所以根本不需要在意一些架構面的東西像是 Load Balance, Microservices。 但隨著業務量變大，專案就需要調整架構。例如 POS 機有店家、交易、發票等資料要處理，當店家越來越多時，要處理的事情就變多了，程式碼也越寫越長，這支 API 就應該拆出去單獨管理，避免讓程式碼之間相互耦合太嚴重，盡量降低相依性，這樣日後要擴充功能才會比較容易，不然彼此之間綁死就很難修改了。 你可能會覺得那為什麼不一開始就設計大一點的架構，其實道理很簡單，業界實戰首重成本，在用戶數沒有增加、公司沒有實際獲利之前，老闆不可能讓你花錢去搞這些，因此程式的架構都是從小變大。\n我：客服的部分呢？\nWells：處理客戶遇到的問題，實際上就是查 bug，用 log 追蹤用戶做了什麼事情，檢查程式有沒有照順序跑，如果沒照順序跑就要看是卡在哪裡，過程中也要跟 App 端合作。\n我：請問專案運作的方式是？\nWells：我們也沒有所謂 PM，其實就是自己管自己，一個禮拜會跟老闆開會檢討一次。通常後端的進度要比前端快 1~2 週，例如前端已經做好註冊頁面，卻沒資料給他，那也沒有用。所以我通常會根據前端的進度，來決定自己要做新的需求，還是維護舊的。 還有一個很重要的是程式碼重構，重構的時機大概有這幾種： \\1. 已經預期架構有問題(超前部署)，例如 websocket 一開始只做 100 個 user，但開會時發現 user 現在已經增長到 200、300 了 \\2. 過了三個月後(大概)回頭看之前寫的程式碼，自己都看不懂，代表寫得不好，就會重構 \\3. 產品的服務超過一定使用率時(server 會寫 warning 寄信通知) \\4. server 每天例行的 job 有沒有跑完，request 有沒有掉，或是有問題(大概一週看一次)\n我：後端工程師的一天是怎麼度過的呢？\nWells：進公司就開始寫 code 啊 (誤 進公司會先規劃今天要做什麼事，評估需要花多少時間，決定事情的先後順序。 通常一進公司業務都會來問問題，所以早上多半是在解決業務的問題，到了下午才開始實際的開發工作，然後快下班時通常老闆會問問題，所以要準備好回答。到了晚上如果有靈感，或是在趕專案，也會寫一下 code。\n轉職 # 我：從 Wells 的 Medium 文章中得知，你曾經自學過一陣子，你覺得當時自學的困難點是什麼？\nWells：一開始自學技術，你可能會知道「怎麼用」，但要怎麼樣才能把技術「用得好」，你不會知道，你也無法衡量什麼是「好」、所以需要多看別人的 code 和技術文章。 初學者都是這樣嘛，一開始照著教材寫，多練習幾次到不需要看教材也寫得出來，這就真的只是入門，代表你會寫，但不代表你寫的程式能夠運作得好。 這個時期要把程式寫到能讓面試官看得上眼，其實比較困難，因為不僅要跳脫出教材，還要有實用的地方，而且不能看起來像是作業。所以困難點就是要怎麼把之前所學整合運用，還有查閱技術文件。\n我：常常講到想成為優秀的軟體工程師最重要的是終身學習，Wells 轉職成功後自學的方式是什麼？\nWells：讀原始碼和官方文件。像是很多人用的套件，如果這個套件常常有在維護，就會去看他是怎麼寫的。 例如 passport 是如何處理登入或驗證？常用的東西要去深挖，除了看他怎麼寫，也要思考為什麼他要這樣設計，是為了涵蓋多數使用情境嗎？還是有其他的理由?可以從 GitHub 的 PR 或 issue 去看大家討論的內容。再來就是補足資工基礎像是資料結構和演算法。\n我：好奇你學習 Ruby on Rails 和 JS 的過程？ 對於學習第二種語言的建議？\nWells：Ruby on Rails 和 JS 都是腳本式語言，所以兩個其實很像。我原本是用 Ruby on Rails 做前後端，後來做前端畫面為了用 Vue 所以學了 JS，之後再延伸到 node.js。基本上第一種語言學得起來，再學第二種就比較輕鬆。會建議先把第一種語言學深，完全搞懂，之後真的遇到瓶頸，例如這個語言無法解決的問題時，再去學別的語言來解決。 然後也要知道語言的優勢和劣勢，最近很流行的 Serverless Computing 像是 AWS Lamda 和 Google Cloud Function，他的費用是依請求數量和程式碼執行持續時間來計算，這時就要選一個消耗記憶體少、執行快速的語言才能降低成本(如 Golang)。\n求職 # 我：Wells 當初求職時是怎麼介紹自己在 ALPHA Camp 的學習經驗？\nWells：因為不是本科系也沒有相關經驗，而且面試官不見得聽過或瞭解 ALPHA Camp，所以展現學習過程的價值就很重要，例如： 「你為什麼要學」不是在網路上隨便看、隨便學了就來面試。 「你怎麼學」、「你在什麼樣的學習環境」是有架構的學，不是半路出家隨便學。 這些問題都要自己先想過，才能夠回答得好，也可以在合適的時候自己講出來讓面試官知道。\n我：有些職缺會要求後端工程師懂前端，Wells 認為要懂到什麼程度？Wells：其實就像是我前面說得，在開發過程中要會看 UI\u0026amp;UX, wireframe，知道前端怎麼運作，這樣後端就知道要怎麼配合。 舉個我自己的例子，在串接第三方 API 像是藍新或政府的 API, 就會很直接感受到寫的人有沒有認真在看待這件事情。 Call API 會有成功跟失敗，你有沒有讓使用者知道失敗的原因，以及失敗時該怎麼呈現都很重要。 我曾經串過一支 API，錯誤時會回傳值一個用逗號分開的字串，看起來就是用陣列轉過來的，第一碼代表錯誤碼，我第一眼看到就覺得很 tricky，再來是每個錯誤碼後面的長度又不同，心想這到底在寫什麼，同時也警惕自己寫的時候不要這樣。 錯誤碼正確才能讓前端好串接，再來是資料格式要對，例如傳 0 會變成 falsy，可能導致執行的結果不同，這就要特別注意；也可能 App 端不能吃 null，你還傳 null ，App 端就會認為你在搞他。 所以其實不只前端，App 也會 call API，要知道對方語言的特性，還有他們需要什麼樣的資料結構和資料型別(或是用 GraphQL 讓前端自己決定要帶哪些資料回去也是一種方式)。\n萬分感謝 # 非常感謝 Wells 助教在萬惡的補班日下班後還讓我訪談，每個問題都回答得相當詳細，讓我認識後端工程師的工作模式和眉眉角角，能聽到資深工程師分享自己的見解與想法，真的是機會難得，再次感謝 Wells 助教！\n","date":"2020 September 27","externalUrl":null,"permalink":"/posts/2020-09-27-interview-my-mentor-wells/","section":"Posts","summary":"Wells 助教是我在 ALPHA Camp A+計畫的 mentor。訪談內容包含了 Wells 助教現職、轉職的經驗以及給轉職者的求職建議，以下訪談內容是用第一人稱及一問一答的方式呈現，盡量保留原話的意思。","title":"資深後端工程師訪談  —  Wells","type":"posts"},{"content":" 前言 # 這是最近刷 Leetcode 學習到的特殊方法，適合在需要排序且題目要求 in-place，也就是空間複雜度 O(1) 的狀況下使用(使用的記憶體不會隨輸入資料增加而增加)；它的時間複雜度為 O(n) 也比一般 sort() 更好 O(n²)。這個方法我覺得直接看範例就很容易懂了～\n舉例 # Reference #1 是 AC 的學長 Danny 寫的文章，由於他的範例設計得非常好，所以我就直接借用他的範例來說明了。\n假設有一個陣列是 [3, 1, 0, 2]，Cyclic Sort 排序的方式會是這樣：\n第一個元素 3，它的位置應該要在 index = 3，所以把它跟在 index = 3的元素交換，陣列會變成 [2, 1, 0, 3] 第一個元素 2，它的位置應該要在 index = 2，所以把它跟在 index = 2的元素交換，陣列會變成 [0, 1, 2, 3] 第一個元素 0，它的位置應該要在 index = 0，它的位置是正確的，因此陣列維持 [0, 1, 2, 3]，第一個元素擺在正確位置後，下個步驟會開始看第二個元素 第二個元素 1，它的位置應該要在 index = 1，它的位置是正確的，因此陣列維持 [0, 1, 2, 3]，第二個元素擺在正確位置後，下個步驟會開始看第三個元素 第三個元素 2，它的位置應該要在 index = 2，它的位置是正確的，因此陣列維持 [0, 1, 2, 3]，第三個元素擺在正確位置後，下個步驟會開始看第四個元素 第四個元素 3，它的位置應該要在 index = 3，它的位置是正確的，因此陣列維持 [0, 1, 2, 3]，這已經是最後一個元素，因此陣列中所有元素已經檢查一遍了，也都放在正確的位置，Cyclic Sort 結束。 用 JavaScript 實現 # Cyclic Sort 是利用陣列元素當作 targetIndex，也就是元素應該要在的位置；若元素不在該在的位置，與該位置的元素互換位置，若元素已經在對的位置，則往下一個元素檢查。\nfunction cyclicSort(nums) { let index = 0; // 目前指向的元素 while (index \u0026lt; nums.length) { // 利用陣列元素值當作 targetIndex // 也就是目前的元素應該要在的位置 const targetIndex = nums[index]; // 若目前元素不在正確的位置，則與該位置的元素互換 if (nums[index] !== nums[targetIndex]) { // 利用解構賦值方法讓兩個元素互換 [nums[index], nums[targetIndex]] = [nums[targetIndex], nums[index]]; } else { // 若元素已經在正確的位置，則往下一個元素看 index++; } } return nums; } console.log(cyclicSort([3, 1, 0, 2])); // [0, 1, 2, 3] 如果可以理解的話，就馬上來做一題試試吧！\n442. Find All Duplicates in an Array # Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.\nFind all the elements that appear twice in this array.\nCould you do it without extra space and in O(n) runtime?\nExample:\nInput: [4,3,2,7,8,2,3,1] Output: [2,3] 這題是要找出陣列中出現兩次的數字，然後用陣列形式回傳，時間複雜度與空間複雜度的要求都很嚴格，很適合使用 Cyclic Sort。\n思考方式：\n用 Cyclic Sort 讓輸入的陣列排序 找出陣列中與 index 不符合的元素 var findDuplicates = function (nums) { let result = []; let index = 0; while (index \u0026lt; nums.length) { // 符合題目規定的範圍 1 ≤ a[i] ≤ n const targetIndex = nums[index] - 1; if (nums[index] !== nums[targetIndex]) { [nums[index], nums[targetIndex]] = [nums[targetIndex], nums[index]]; } else { index++; } } // 若有元素與index不同,就代表這個數字是重複的 for (let i = 0; i \u0026lt; nums.length; i++) { if (nums[i] !== i + 1) result.push(nums[i]); } return result; }; 這題解法為了符合題目規定的數字範圍，要在 targetIndex的值 -1，才不會變成 0 導致出現 undefined 哦。\nReference # javascript leetcode 刷題筆記-coding pattern:Cyclic Sort Leetcode 刷題 pattern — Cyclic Sort [YouTube] Cycle Sort ","date":"2020 September 10","externalUrl":null,"permalink":"/posts/2020-09-10-leetcode-442-cyclic-sort/","section":"Posts","summary":"這是最近刷 Leetcode 學習到的特殊方法，適合在需要排序且題目要求 in-place，也就是空間複雜度 O(1) 的狀況下使用(使用的記憶體不會隨輸入資料增加而增加)","title":"[Leetcode with JavaScript] 刷題筆記 — 特殊方法 Cyclic Sort","type":"posts"},{"content":"","date":"2020 September 10","externalUrl":null,"permalink":"/tags/cyclicsort/","section":"Tags","summary":"","title":"CyclicSort","type":"tags"},{"content":"","date":"2020 September 10","externalUrl":null,"permalink":"/tags/leetcode/","section":"Tags","summary":"","title":"LeetCode","type":"tags"},{"content":" 前言 # 這是最近刷 Leetcode 學習到的特殊方法，適合拿來解尋找重複數字的題目， 如 Array 題型 287. Find the Duplicate Number，還能解答 Linked List 相關題型如 141. Linked List Cycle、142. Linked List Cycle II，覺得相當實用，因此決定寫成筆記，內容著重於應用在刷題，若想細究原理的讀者可以參考底下的 Reference #4 #5。\nFloyd’s Cycle Detection # 有發現封面圖片上出現了烏龜與兔子嗎？因為這個演算法俗稱龜兔賽跑演算法。以下是原理及結論：\n假設數列是一個賽道，龜兔一起出發，兔子跑得比烏龜快，如果這個賽道中沒有環(cycle)存在，在龜兔速度不變的情況下，烏龜永遠不會與兔子相遇；但***只要賽道中有環，那龜兔一定會在某一點相遇*** (可參考 Reference #1) 龜兔相遇後，可藉由將烏龜退回起點，兔子在原地不動，此時龜兔之間的距離，會是環的整數倍，然後讓龜兔每次只動一格，兩者交會時就會是環的起點。 龜兔兩個在數列裡跑，聽起來好像有點熟悉，沒錯，這個概念和我在 上一篇刷題筆記中所介紹的雙指針 Two Pointers 方法很像，只是指針一個快一個慢，因此又稱為「快慢指針」。\n接下來直接看題目實作吧！\n287. Find the Duplicate Number # Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.\nThere is only one duplicate number in nums, return this duplicate number.\nFollow-ups:\nHow can we prove that at least one duplicate number must exist in nums? Can you solve the problem without modifying the array nums? Can you solve the problem using only constant, O(1) extra space? Can you solve the problem with runtime complexity less than O(n2)? Example 1:\nInput: nums = [1,3,4,2,2] Output: 2 Example 2:\nInput: nums = [3,1,3,4,2] Output: 3 題目要求是找出陣列中重複的數字然後回傳，聽起來好像不難嘛 😏，但是最後還有但書，空間複雜度 O(1)，時間複雜度 O(n²) 😱，因此若想用暴力法搭配 .sort() 都不符合題目的規範。\n這時候就需要使用快慢指針了，以下是思考方式：\n使用兩個變數 slow fast 來代表慢指針(烏龜) 及 快指針(兔子)，他們一開始會在原點也就是 nums[0] 然後讓龜兔速度不同，因此 fast會用兩層陣列的方式，來實作兔子走得比較快的狀況 利用迴圈讓龜兔重複 #2 的動作，直到 **slow** **fast**相等(龜兔相遇)，代表有環存在 讓slow退回原點nums[0]，fast保持在原地不動 然後再次利用迴圈讓龜兔開始跑，但這次龜兔的速度要是一致的，再次相遇時，就是環的起點，也代表重複的數字 var findDuplicate = function (nums) { let slow = nums[0]; let fast = nums[0]; slow = nums[slow]; fast = nums[nums[fast]]; // find meeting point while (slow !== fast) { slow = nums[slow]; fast = nums[nums[fast]]; } // find entry point of cycle slow = nums[0]; while (slow !== fast) { slow = nums[slow]; // slow back to start point fast = nums[fast]; // fast stay at meeting point } return fast; }; 這個方法也能應用在 Linked List 的題型，先來題簡單的：\n141. Linked List Cycle # Given a linked list, determine if it has a cycle in it.\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where the tail connects to. If pos == -1, then there is no cycle in the linked list.\nFollow up:\nCan you solve it using O(1) (i.e. constant) memory?\nExample 1:\nInput: head = [3,2,0,-4], pos = 1 Output: true Explanation: There is a cycle in the linked list, where tail connects to the second node. 這題對空間複雜度有相同的要求，因此也相當適合使用快慢指針，基本上邏輯相同，就不再贅述了，如果有學過 Linked List 的人可以順便練習一下。\nvar hasCycle = function (head) { let fast = head; let slow = head; // check the cycle while (fast \u0026amp;\u0026amp; fast.next) { fast = fast.next.next; slow = slow.next; // cycle exist if (fast === slow) return true; } // no cycle return false; }; 142. Linked List Cycle II # Given a linked list, return the node where the cycle begins. If there is no cycle, return null.\nTo represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list.\nNote: Do not modify the linked list.\nExample 1:\nInput: head = [3,2,0,-4], pos = 1 Output: tail connects to node index 1 Explanation: There is a cycle in the linked list, where tail connects to the second node. var detectCycle = function (head) { let fast = head; let slow = head; while (fast \u0026amp;\u0026amp; fast.next) { fast = fast.next.next; slow = slow.next; if (fast === slow) { slow = head; while (fast !== slow) { fast = fast.next; slow = slow.next; } return slow; } } return null; }; Reference # If Programming Was An Anime 判圈算法 找出重複數字：Floyd Cycle Detection Algorithm 龜兔賽跑演算法 探索 Floyd Cycle Detection Algorithm [ Wiki] Cycle detection ","date":"2020 September 6","externalUrl":null,"permalink":"/posts/2020-09-06-leecode-287-floyd-cycle/","section":"Posts","summary":"這是最近刷 Leetcode 學習到的特殊方法，適合拿來解尋找重複數字的題目。","title":"[Leetcode with JavaScript] 刷題筆記 — 特殊方法 Floyd's Cycle Detection","type":"posts"},{"content":"","date":"2020 September 6","externalUrl":null,"permalink":"/tags/bruteforce/","section":"Tags","summary":"","title":"BruteForce","type":"tags"},{"content":"","date":"2020 September 6","externalUrl":null,"permalink":"/tags/hashmap/","section":"Tags","summary":"","title":"HashMap","type":"tags"},{"content":"","date":"2020 September 6","externalUrl":null,"permalink":"/tags/twopointers/","section":"Tags","summary":"","title":"TwoPointers","type":"tags"},{"content":" 前言 # 這個系列是在記錄參與 ALPHA Camp A+ 人才計畫的過程中，練習刷題的想法及筆記。\n這篇文章會透過上千題中 Leetcode 的第一題 Two Sum 及進階題 3Sum，來說明三種基本的解題方法，分別是暴力解(Brute Force)、雜湊表 Hash Table、雙指針 Two Pointers。如果你和我一樣是剛開始刷題的話，那就繼續看下去吧～\n#1 Two Sum (Easy) # Given an array of integers nums and and integer target, return the indices of the two numbers such that they add up to *target*.\nYou may assume that each input would have *exactly* one solution, and you may not use the same element twice.\nYou can return the answer in any order.\nExample :\nInput: nums = [2,7,11,15], target = 9 Output: [0,1] Output: Because nums[0] + nums[1] == 9, we return [0, 1] 題目給一個陣列 nums 及一個目標值 target，兩者都是整數，要找出兩個陣列元素相加後與目標值相等的元素之 index。\n暴力解 (Brute Force) # 這是我腦海中第一個想法，利用巢狀迴圈的 index i 和 j 一前一後遍歷題目給的陣列元素，再用 if 判斷兩個 index 取出的值相加後是否等於 target。\n不過使用巢狀迴圈的缺點就是很費時，時間複雜度也會變成 O(n^2)，所以可以看到 Runtime 只比 17.9% 的人快。Memory Usage 則是因為沒有宣告新的變數，直接使用迴圈的 index 所以表現不錯。\nvar twoSum = function (nums, target) { for (let i = 0; i \u0026lt; nums.length; i++) { for (let j = i; j \u0026lt; nums.length; j++) { if (i !== j \u0026amp;\u0026amp; nums[i] + nums[j] === target) { return [i, j]; } } } }; 雜湊表 Hash Table # 之後學了 Hash Table，先透過第一次 for 迴圈將陣列 nums 中所有的元素，以 key-value pair 型式記錄到物件 map 中，這時因為 map 還是空的所以不會進到 if 條件判斷。從第二次迴圈開始 map 有資料了程式就會進入 if 條件判斷，檢查遍歷的陣列元素和物件 map 中 key-value pair 的關係。\n與暴力解相比，Hash Table 的優點是有效降低時間複雜度(O(n))，可以看到 Runtime 快很多，代價是要使用比較多的記憶體空間。Hash Table 最大的好處是 input 不需要是 sorted array 也能使用。\nvar twoSum = function (nums, target) { let map = {}; for (let i = 0; i \u0026lt; nums.length; i++) { let num1 = nums[i]; let num2 = target - num1; if (map[num2] \u0026gt;= 0) { return [map[num2], i]; } map[num1] = i; } }; 看起來很簡單的題目，其實可以練習到不同的解法，難怪有人說越簡單的題目，其實越困難！\n#15 3Sum (Medium) # Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\nNote:\nThe solution set must not contain duplicate triplets.\nExample:\nGiven array nums = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ] 這題給了一個陣列，元素皆為整數且有正有負，要我們找出三個元素相加後為 0 的組合放進陣列回傳，且不能有重複的組合。\n為避免重複，先 sort 但預設是字元大小排序 正負數混合的情況下會不如預期 例如 -1 -1 2 -2 會變成 -1 1 2 -2 但我們期待的是 -2 -1 1 2\n題目要求三個數字相加為 0，假設是 num1, num2, num3，如果像是 Two Sum 那樣，先讓 num1 固定不動，那 num2 + num3 就會是 num1 的相反數，因此關鍵是要在 num1 之後的數字中，找出兩數相加等於 num1 的相反數，這個時候就相當適合使用雙指針 Two Pointers。\n雙指針 Two Pointers # 這個方法最重要的是 input 需為 sorted array，讓 nums 由小排到大，這樣當 num1 固定時，就可以讓 num2, num3 也就是左右指針，從 num1 之後的數字序列的「頭」和「尾」向中間「夾」。\n/** * @param {number[]} nums * @return {number[][]} */ var threeSum = function (nums) { nums.sort((a, z) =\u0026gt; a - z); const result = []; for (let i = 0; i \u0026lt; nums.length; i++) { // 固定第一個數字 const num = nums[i]; if (num \u0026gt; 0) break; // 因為sort過，所以第一個數字大於零，代表整個nums都是正整數 if (num === nums[i - 1]) continue; // 若連續兩個數字相同，就繼續執行 const ans = -num; // 要找 num 的相反數 let left = i + 1; // 左指針的index let right = nums.length - 1; // 右指針的index while (left \u0026lt; right) { // 當左指針小於右指針就執行 if (nums[left] + nums[right] === ans) { result.push([num, nums[left], nums[right]]); left++; // 找到一組解就讓左右指針向中間夾 right--; // 左右指針移動過程中碰到重複的數字要跳過 while (left \u0026lt; right \u0026amp;\u0026amp; nums[left] === nums[left - 1]) left++; while (left \u0026lt; right \u0026amp;\u0026amp; nums[right] === nums[right + 1]) right--; } else if (nums[left] + nums[right] \u0026lt; ans) { left++; while (left \u0026lt; right \u0026amp;\u0026amp; nums[left] === nums[left - 1]) left++; } else { right--; while (left \u0026lt; right \u0026amp;\u0026amp; nums[right] === nums[right + 1]) right--; } } } return result; }; ","date":"2020 August 30","externalUrl":null,"permalink":"/posts/2020-08-30-leetcode-popular-approach/","section":"Posts","summary":"這篇文章會透過上千題中 Leetcode 的第一題 Two Sum 及進階題 3Sum，來說明三種基本的解題方法，分別是暴力解(Brute Force)、雜湊表 Hash Table、雙指針 Two Pointers。","title":"[Leetcode with JavaScript] 刷題筆記 - 刷題常用的三種解法 Brute Force, Hash Map, Two Pointers","type":"posts"},{"content":" 前言 # 從 2019 年 10 月開始 AC 學期一的課程，到了現在 2020 年 8 月，歷時 10 個月，終於走到了這個階段。因為中間有農曆年，加上課程架構調整的緣故，學習的時間比自己最初預想的久了一點。\nAC 在每個學期的課程結束後，都有安排期末測驗，包含技術簡答及程式撰寫的題型，通過後可以得到該學期的結業證書。每當一個學期到了尾聲，想休息一下時，總是會再逼著自己想想那張證書，再衝刺一下吧，趕快把期末測驗完成吧，證書就在眼前了！\n學期三作為 AC 最後一個學期，真的是相當精實，尤其在 Simple Twitter 協作專案結束後，還有許多協助回顧開發過程的作業如：工具的選擇、解決問題的過程、同儕互評程式碼品質、360 Review、部落格反思等等。\n這些看似繁複的文字作業，讓我可以更深入挖掘、紀錄自己在協作專案中的點點滴滴，反覆去咀嚼兩週內密集開發的每個時刻，對於內化學習的成果很有幫助；不僅僅只是完成專案的程式碼，然後網頁會動，這樣子而已。\n當然缺點就是，因為學期與學期之間通常只有一週的時間，要繼續下個學期的人要趕在下個學期開課前完成；雖然期末測驗都說只需要 1~2 天就能完成，但我每次都超時啊 😭。\nA+ 人才計畫 # 眼尖的人可能發現了，學期三不就是最後一學期了嗎？哪來下個學期？\n沒錯，AC 確實是規劃了三個學期的課程，但還有一個隱藏版的衝刺計畫在最近推出了！那就是 A+ 人才計劃！\nA+ 人才計劃全額免費，錄取者須繳交保證金。AC 再三強調這是衝刺訓練，不是課程。宗旨是「每週挑戰，每週淘汰」被淘汰者會依課程進度扣取一定比例的保證金，為的是募集真正想要更上一層樓的學習者。\n明天就要開課了，但我還在這寫學期三畢業部落格，話不多說就寫到這啦，前面學期的心得文可以參考下面的連結。\n希望我可以成功撐到最後，這樣才有 A+ 心得文可以發。\nAlpha Camp 學期一學習心得 Alpha Camp 學期二學習心得 ALPHA Camp 學期 2–3 自學經驗回顧 ALPHA Camp 學期三 Simple Twitter 協作專案 ","date":"2020 August 23","externalUrl":null,"permalink":"/posts/2020-08-23-alphacamp-graduation-blog/","section":"Posts","summary":"從 2019 年 10 月開始 AC 學期一的課程，到了現在 2020 年 8 月，歷時 10 個月，終於走到了這個階段。","title":"ALPHA Camp 畢業部落格","type":"posts"},{"content":" 前言 # 終於來到了學期三期末的協作專案了，這個專案可以選擇用熟悉的全端開發架構，或是使用初接觸的前後端分離開發架構，打造 SPA (single-page application)。不過由於這屆前端課程的同學很少，所以多數組別都是使用全端開發架構，我跟 Harry 很幸運找到一位前端的夥伴 Ivy 組隊，終於可以體驗一下傳說中的前後端分離開發架構啦～\n基本分工 # 前端 Vue.js 由 Ivy 負責，後端 Node.js + Express.js 搭配 MySQL 由我(兼組長)和 Harry 負責。由於 Ivy 是在職前端工程師，所以已經預期會有部分前端刻板工作需要後端支援。 我和 Harry 在後端的分工一開始是滿隨意的，直接用 User Stories 來分，誰做得快就先做，但第一次 merge 時發現這樣衝突會很多。為了避免花太多時間在解這些 conflict ，決定由 Harry 先把 Model 建好，而我先寫註冊登入登出驗證等跟套件相關的功能。\n協作方式 \u0026amp; 工具 # 組長的工作其實就跟 PM 一樣 (剛好我前一份工作就是 PM)，所以要負責向 AC 回報專案進度、溝通專案問題等工作。\n除了分工，協作的方式也很重要，如何讓夥伴們順利地執行專案也是組長的責任，這邊介紹一下我們選擇的協作工具：\nSlack 主要使用 backend, frontend, general 這三個 channel 來討論，並將 Trello 整合進 Slack，同時也把常用的文件連結用 PIN 功能儲存起來，方便大家查找。 \\2. Google Docs 將 User Stories、Tech Hour 討論結果、測試問題等資訊記錄在這，方便共筆。\n\\3. Trello 把 Google Docs 上的工作標題轉換成一張張卡片，可以一眼看出大家正在做的、和已經完成的工作。\n展開兩週的開發之旅 # 指定功能 \u0026amp; 後端 debug 地獄 # Simple Twitter 開發的要求分為指定功能及挑戰功能，指定功能除了正常運作之外，還要能夠通過 AC 撰寫的自動化測試。\n剛開始和 Harry 兩個人花了三天照著自己的意思把後端 API 建置起來，信心滿滿的跑自動化測試，跑完看著滿江紅的終端機畫面，當時還覺得很有趣，想說靠怎麼沒有一條路由是通過的 😂，殊不知自己正踏入 debug 地獄中\u0026hellip;\nbug 的分類大概可以分成三種：\n自動化測試本身的 bug 這種 bug 會耗費最多時間，因為自動化測試的程式碼是用 mocha, chai, sinon 等測試套件或方法寫的，之前也沒學過，所以只能盡量閱讀這些程式碼，看久了會發現一些重複的關鍵字如 should, equal, expect 等等，就就可以大概猜出意思；再來是從錯誤訊息中尋找線索，加上在自己的程式碼和測試程式碼中用 console.log 來除錯。真的有發現錯誤就要趕快回報給 AC，避免卡住專案的進度，通常他們會儘速修好然後發佈更新版本(有時更新了會出現新的 bug 😵)。 API 回傳的資料與測試要求不符合造成的 bug 這種 bug 通常可以從錯誤訊息及自動化測試的程式碼中發現，像測試的要求是回傳一個陣列，但我們回傳的是一個物件，那就會出現錯誤。 神奇的 bug 這次每一組都有遇到 Like Model 的 id 在跑 SQL 時無法自動讀取，造成自動化測試一直失敗的狀況，在兩個人 debug 許久後，我強大的隊友 Harry 想到直接把 id 手動寫進 model 的方法，才成功通過測試。向 AC 回報時，維元老師看了也是嘖嘖稱奇，只能說程式的世界真是無奇不有 🤔。 Reply Model 會自動 INSERT id\nLike Model 就是不會…\n後端經歷過整整一週兩個人每天開 Zoom 分享螢幕進行 live degug 的 debug 地獄之後，終於迎來了全數通過自動化測試的這個 moment，眼淚差點都要滴下來了 😭，但是專案還沒結束呀，還要繼續衝刺才行！\n部署 API server # 部署 Heroku 的過程也是花了比預期多的時間，主要問題在於環境變數 NODE_ENV 的設定，短短 3 行 code 寫了 3 個小時\u0026hellip;只能怪自己忘記 Heroku 還有 Procfile 要設定 😵。\n挑戰功能：即時聊天室 # 指定功能的開發及 debug 就耗掉了一週的時間，加上有些 bug 需要等 AC 更新才能繼續開發，所以在等待期間我們也沒閒著，持續研究 ngrok 及 socket.io 的用法，我也順手將 ngrok 的設定過程寫成懶人包供大家參考。\n5 分鐘完成 ngrok 設定(Mac) *ngrok 是一個可以快速讓外網連接本機 localhost 的工具，話不多說，六個步驟帶你快速完成設定！*medium.com\n過程中前端夥伴因為工作關係無法準時完成進度，加上我和 Harry 都不諳 Vue.js ，只好當機立斷，臨時改用全端開發架構來完成即時聊天室。\n挑戰功能是採用黑客松的方式，在 48 小時內盡可能的開發，所以改用全端開發架構也代表，我們需要從零開始刻畫面並且在 48 小時內完成 😵，由於我在指定功能階段就有支援前端一些簡單的畫面，所以畫面由我負責，Harry 則基於我們之前研究的 socket.io 基礎，繼續開發私訊、通知等其他功能。\n兩個人經過兩天幾乎沒睡的密集開發，最終結果還算滿意，真的是 盡 · 全 · 力了。\nhttps://twitter-proj-chat.herokuapp.com/\ntest account 帳號 user0 ~ user4 密碼 12345678\n總結我做了哪些事情？ # 建置專案協作環境及共筆文件 ERD 設計繪製、共同撰寫 API 文件 註冊登入登出、使用者驗證功能 使用者資料、相片更新功能 種子資料設計 Heroku 部署 API server 掌握 ngrok 使用方法 socket.io 基本環境建立 挑戰題聊天室前端頁面切版及資料串接 感想 # 前後端分離開發架構確實有其優勢 # 在兩週內因緣際會經歷了全端及前後端分離的開發架構，我很深刻的感受到前後端分離的開發優勢，在寫 API 時是從 Model 出發，所以後端變得相對單純，可以完全專注在邏輯上，只要依照前後端講好的 API 文件下去開發即可，不需要像全端開發時還需要顧慮前端樣板寫邏輯所需的資料，這麼一來後端的開發效率就高很多 💪。\nGit Flow 協作經驗 # 學習運用 Git, GitHub, Git Flow，這真的需要多人協作才能學會，運用分支來區分不同階段、任務的程式碼；體會到開發時要管理 commit 的粒度，以便 merge 時可以更順利地解 conflict。\n要 merge 時我們都直接開 Zoom 分享螢幕來一起解 conflict，還記得第一次 merge 時遇到好幾個 conflict 緊張得要死，其實就只是兩個人都建立了一樣的 model 而已，到後期三兩下就可以完成 merge。\n其中最大的差異是程式碼分工，如果可以先預想到會重複的程式碼如 Model ，就可以先由一個人來建立，而兩個人開發的功能也要注意會不會有重複的程式碼，這樣可以避免重工又要解 conflict 的狀況發生，加速開發。\n每一次作業的畫面刻板都要認真做 # 如果不是從學期一開始就認真學習前端切版技術，每一次作業也都嘗試多做一點把自己心中的畫面實現，現在突然要我在短時間做出聊天室畫面我想是不可能的，何況之前的作業也很少使用到 position: relative, absolute, fixed 等屬性，真的能成功刻出來我自己也有點小驚訝就是了 🤣。\n使用第三方套件的能力 # 現代開發模式多須依賴開源軟體或套件，避免自己重新製造輪子，加快開發的速度。因此閱讀官方文件的能力很重要，這與英文能力和程式實作能力有關，官方文件通常都寫得很簡單、陽春，如何轉化為符合自己專案架構的寫法，並解決過程中發生的問題（如非同步處理），我想這就是工程師的價值所在。\n先釐清測試要求再開發 # 如果可以重來，在有自動化測試檔案的情況下，我會先研究自動化測試的要求，再開始開發 API。開發的過程中也要持續跑自動化測試，例如先寫測試要求的部分，確定通過後，再寫完整功能，這樣會更有效率。而且自動化測試本身也會有寫錯的地方，同樣需要 debug，一來一往會耗費許多時間。\n專案的風險管理 # 專案初期太樂觀，與前端夥伴只有口頭上交流；之後後端自動化測試一波三折，加上沒有特別去 follow 前端夥伴的進度，導致第二週統整指定功能的進度時，發現前端已經嚴重落後，無法挽回了。\n如果後端兩個人都無法支援前端 Vue.js 的部分，那還是建議使用全端開發方式，避免前端進度落後時，沒有人可以支援。\n因為這個三人專案不會有專職的 PM，所以進度的掌握需要靠每個人共同努力，真的陷入開發漩渦或是有外務導致無法準時交件，儘早把問題丟出來討論，讓團隊有更多時間可以集思廣益，會是比較好的方式，畢竟最糟的狀況也就是從零開始而已，只要時間夠，沒有什麼不可能的。\n感謝夥伴們 # 很感謝 Harry 和 Ivy 兩位願意和我組隊，也很榮幸和你們組隊。\n和 Harry 在一開始的後端開發，到黑客松的全端開發，合作的過程都相當愉快，也從你身上學到很多 debug 及開發新功能的思維。一起在 Zoom 做 live debug 的夜晚、靈光一閃想到解法的瞬間、經過不斷討論激盪出的想法，到最後既使指定功能已經 delay ，挑戰題也不能輸的那種拚勁，相信這些都會是我們相當難忘的回憶。\nIvy 一開始就分享了許多業界的做法，像是後端在撈資料時可以先回傳 wait ，讓前端可以跑過場動畫等等。過程中也分享了你在公司的專案，我知道你是個在意細節且不服輸的前端工程師，如果有更多時間，相信我們可以合作完成更好的作品！\n計畫趕不上變化，大概就是這次專案最好的寫照了，是吧？\n","date":"2020 August 11","externalUrl":null,"permalink":"/posts/2020-08-11-alphacamp-semester-3-simple-twitter-project-reflection/","section":"Posts","summary":"終於來到了學期三期末的協作專案了，這個專案可以選擇用熟悉的全端開發架構，或是使用初接觸的前後端分離開發架構，打造 SPA (single-page application)。","title":"ALPHA Camp 學期三 Simple Twitter 協作專案","type":"posts"},{"content":"學期 2–3 正式開始進入後端開發的領域，使用的語言依舊是 Javascript，但環境從 broswer 換到了 server ，也開始接觸 Javascript 的執行環境 Node.js 及網路框架 Express。\n在寫作業時開始感受到前後端的區別，不論在 server 端多麼用力的使用 BOM or DOM 的相關語法，除了噴紅字以外是不會有任何回應的 😂\n在寫老爸私房錢的作業時，想要操作兩個 Schema 來 create 消費的資料及種類的資料，想將Category.find()撈出來的資料拿到Record.create()裡面用\n//recordSeeder.js let category = [] Category.find() .lean() .then(cates =\u0026gt; { console.log(cates) // 這邊有看到資料 return category.concat(cates) }) 取出 Category 的資料，放進之後的 record 種子資料 db.once(\u0026#39;open\u0026#39;, () =\u0026gt; { console.log(\u0026#39;mongodb connected!\u0026#39;) for (let i = 0; i \u0026lt; 10; i++) { Record.create({ category: 這邊要用, name: pickName(), date: pickDate(), amount: Math.floor(Math.random() * 500 + 50) }) } console.log(\u0026#39;done!\u0026#39;) }) 結果發現不行，只能把Record.create()寫在Category.find(的 .then()裡面。如果還有要執行的動作，就要一直.then()下去\u0026hellip;\ndb.once(\u0026#34;open\u0026#34;, () =\u0026gt; { console.log(\u0026#34;mongodb connected!\u0026#34;); Category.find() .lean() .then((cates) =\u0026gt; { console.log(cates); // 這邊有看到資料 for (let i = 0; i \u0026lt; 10; i++) { Record.create({ category: 這邊要用, name: pickName(), date: pickDate(), amount: Math.floor(Math.random() * 500 + 50), }); } }); console.log(\u0026#34;done!\u0026#34;); }); 原來這就是非同步操作著名的 callback hell\u0026hellip;我寫兩層就覺得不太對勁了，下面這種到底\u0026hellip;\n參考了政治助教分享的 Promise 筆記好像從有懂一點？但來不及實作在老爸私房錢的作業上。\n在最後驗收單元寫 URL Shortener 時，我的邏輯是這樣：\n中間又遇到了非同步操作的問題，像是在 urlCheck() 檢查網址能否正常連線，可以連線才會執行generateShortURL()產生短網址，但程式執行的結果卻是不管網址能不能連線，都會產生短網址 😵 。\n經過一連串的console.log()除錯，發現generateShortURL()沒有等待urlCheck()，這時候就需要使用 Promise 啦～\n雖然最後的async/await寫得有點笨笨的，但還是成功使用 Promise 解決問題了，非常開心。\n好在這個專案我已經逐步摸索出非同步的寫法，現在學期三的作業也需要用到非同步的寫法，使用起來就更加順手，不過還是要在學期三從頭學習 callback, Promise, async / await 演進的過程與精進的寫法。\nasync function shortenAsyncAwait() { const value = await urlCheck(); const value1 = await generateShortURL(value, url); const value2 = await checkShortUrlDuplicated(value1); const value3 = await createData(value2); const previewData = await linkPreviewGenerator(url); const value4 = await saveThumbnail(value3, previewData); } shortenAsyncAwait(); 首次嘗試暗色系的 UI 配置，有種神秘的感覺。\n實作短網址網站常有的後台追蹤點擊次數功能\n這個專案有部署到 Heroku，功能可以正常運作，但是短網址管理介面的 網頁 preivew 功能因為套件與 Heroku 會衝突，所以無法正常顯示，目前只能在本地端看到網頁 preview 😢。\nURL SHORTENER Edit descriptionfrozen-atoll-45486.herokuapp.com\n完整的程式碼可以在我的 GitHub 查看，喜歡的話歡迎 Fork 並幫我按個 Star 吧！\nShihTingJustin/url_shortener ","date":"2020 June 11","externalUrl":null,"permalink":"/posts/2020-06-11-alphacamp-semester-2-3-reflection/","section":"Posts","summary":"學期 2–3 正式開始進入後端開發的領域，使用的語言依舊是 Javascript，但環境從 broswer 換到了 server ，也開始接觸 Javascript 的執行環境 Node.js 及網路框架 Express。","title":"ALPHA Camp 學期2–3 自學經驗回顧","type":"posts"},{"content":" 關關難過，關關過\n過年後開始 AC 學期二的課程 (改版後 2–1 \u0026amp; 2–2)，一晃眼兩個月就過去了，照慣例在學期結束時，要寫篇心得才能得到結業證書，也趁這個機會讓自己回顧一下這段時間的點點滴滴。\n從「量」到「質」的轉變 # 學期二前半段的課程節奏與學期一相似，先幫助學生建立這個學期需要的觀念與技術，例如：函式、RWD、Grid、Bootstrap、BOM、DOM 操作。\n題外話，這是我原本認識的 RWD\nSource: pinterest\n這是我現在學的 RWD\nSource: https://www.perfectinfosolution.com/\n這是我原本認識的 BOM (Bill of Materials)\nSource: https://planningandmerchandising.blogspot.com/2016/11/bill-of-material-bom-bill-of-materials.html\n這是我現在學的 BOM (Browser Objects Model)\nSource: https://ithelp.ithome.com.tw/articles/10202707\n單週作業量大概是維持在 4~7 份，而且難度明顯比學期一高一些，若不是因為有先預讀，我想自己在進度規劃上可能會有點手忙腳亂。\n後半段的課程就是學期二的重頭戲了，開始會有不同的「小型」專案像使徒般一個接著一個襲來：電影清單、社群名單、翻牌遊戲、踩地雷，並且搭配不同的技術如：串接第三方 API、JSON、Ajax、Git \u0026amp; Github、演算法、MVC 架構等等。\n這時單週作業數量已經比之前少了許多，然而每份作業的複雜度更高，能熟練運用之前所學語法是最基本的，除此之外需要花費更多時間思考，每份作業需要撰寫的程式碼行數也是快速上升，此時學習的維度已由「量」轉為「質」。\n學期二是你的練功場 # 現在回過頭來看， AC 為學期二所下的這句註解真是相當貼切！學期二每週所學的語法與技術，都讓我很想回去重構之前的作業。 我一直很喜歡觀摩學長姐的精選作業，尤其是學期後半段的小型專案，學長姐的作品完成度之高，功能之豐富，UI 之精美，有時真的讓人望塵莫及；在讚嘆完別人後，我也會將優點學起來，同時盡力思考還有哪些技術可以應用在自己的作業裡。\n學期末的踩地雷作業，可以點這裡玩玩看\n開始寫筆記 # 學期二的課程內容真的很多，除了將想法或筆記寫在白紙上，我也會用 HackMD 來記錄。\nHackMD 雖然是主推多人協作服務，但編輯器的本身用途非常廣泛，可以作為簡單的筆記軟體來寫筆記、日記、文件等，並用標籤（tag）進行分類與管理，也可以將程式碼很好地呈現出來。\n寫筆記 \u0026amp; 記錄問題\n總結 # 學期二的課程讓學生在已經建立的技術水平上，每週逐漸加入一些沒看過的演算法、函式、架構，整體兼具深度及廣度，但又不會因為難度太高而無法完成作業。\n課程節奏與工作坊 (計時器、演算法) 搭配得很好，明顯提高了我學習的效率。踩地雷作業更是讓我 絞盡腦汁 + 廢寢忘食 寫了整整一個禮拜，完成的瞬間真的是開心到大叫，很享受這種感覺，非常期待之後的課程，我很想再回頭重構踩地雷，順便加入排行榜的功能。\n","date":"2020 April 22","externalUrl":null,"permalink":"/posts/2020-04-22-alphacamp-semester-2-reflection/","section":"Posts","summary":"過年後開始 AC 學期二的課程 (改版後 2–1 \u0026amp; 2–2)，一晃眼兩個月就過去了，照慣例在學期結束時，要寫篇心得才能得到結業證書，也趁這個機會讓自己回顧一下這段時間的點點滴滴。","title":"ALPHA Camp 學期二學習心得","type":"posts"},{"content":" 前言 # 隨著 ALPHA Camp（以下簡稱 AC ）學期一的課程接近尾聲，我登入了註冊已久卻從未使用過的 Medium 帳號，決定記錄一下這四週的學習歷程（絕不只是為了完成最後一週的作業哦 :P）。\n全端 Web App 開發 學期一：程式設計入門 # 不免俗的，先簡介一下課程架構，細節可以參考 AC 精美的學生手冊。\n學習內容與活動：你將認識程式語言、網站開發，以及運算思維的基本觀念。包括 HTML/CSS 與 JavaScript ，這學期是整套全端 Web App 開發課程的開端。 學習目標：這學期你的目標是建立學習習慣、培養手感。課程平台上每週有規劃好的進度和目標。課程內容於每週一釋出。 課程平台：所有課程 (包括內容、作業、助教問答，以及活動錄影) 都會在我們開發的學習平台 — Lighthouse 上，平台無需事前安裝任何軟體，僅需流暢的網路與瀏覽器即可操作。 Source: 學期一學生手冊\n選擇 AC 的原因 # 由於前一份工作是產品企劃，故以行銷 4P 來說明最初選擇 AC 的原因：\n一、產品（Product） # 課程架構完整易懂 課程內容永久觀看，課程內享有線上問答、程式作業回饋、線上互動式工作坊、每週學習報表、轉職諮詢等學習支援 二、價格（Price） # 一學期繳費一次。學多少、付多少，按部就班學習 七天鑑賞期，如果真的不喜歡，想走就走沒負擔 三、地點（Place） # 線上進度模式，免除實體課程的舟車勞頓，節省時間及交通成本，並可自行安排每週學習時間 四、促銷（Promotion） # 我報名學期一時並沒有促銷活動，不過學期一的訂價為 3000 元，也算是一種促銷，畢竟這種價格的四周課程要上哪兒找？ 這某種程度也代表 AC 對自己的產品很有信心，認為多數學生完成學期一之後，會繼續學期二、三、四的課程 學期一課程結束前有學期二早鳥報名、申請獎學金等促銷活動 學習體驗分享 # 到底 AC 學期一的課程上起來感覺怎麼樣呢？\n先簡介一下我的狀況 學科背景：大學畢業、工程科系、學過 C 語言 每週皆約投入 15–20 小時完成 AC 的課程及作業\n以下為我認為最有幫助的課程環節：\n1. 目標設定 # 在投入學習之前，設定**「個人目標」，同時了解自己的「學科背景」**是非常重要的，因為這將影響你的學習決心，以及碰到學習瓶頸時的態度。\nSource: Week 1 工作坊\nSource: Week 1 工作坊\n2.工作坊 # 在每週三晚上 7:30~9:00 舉行（Week 1 ~ 3），大概的流程如下：\n7:30–7:50 暖身 由講師及助教以線上視訊帶領同學複習本周課程，並穿插問答小遊戲，讓課程更活潑。\n7:50–9:00 操作練習 由講師及助教手把手帶同學進行操作練習，就像看遊戲實況一樣，可以觀摩講師 coding, debug 的過程，直接學習到寫程式的思維及眉角，像是常用語法、容易犯錯的地方、搜尋語法、閱讀官方文件，過程中若有不懂的地方也可以隨時提問。\n小結：若能在工作坊開始前先看過 50% 以上的當週進度，學習效果會更好。\nSource: 學期一學生手冊\n得分王才知道神秘小禮物是什麼哦\n3. 學習社群 # 在學習平台 Lighthouse 除了觀看課程之外，還能透過提問、留言等方式與助教及同學一起教學相長，不必一個人孤單自學；而實作作業完成後，會有專業的助教給予批改及回饋建議，同時也可以觀摩其他同學的作業，學習別人的邏輯模式與程式寫法。\n4. 課外活動 # 除了既有課程之外，AC 會不定期舉辦活動，如 Ask Me Anything 活動會邀請軟體圈知名人士分享心路歷程及業內知識、還可以旁聽學期四學長姐的畢業專案發表會，一窺產品開發的過程與方法。\n5. 期末 # 跟著 AC 的課程進度，順利完成了最初設定的目標。學期一四周的課程以 facebook 留言頁面實作劃下句點，看似簡單的靜態網頁，背後隱藏了無數的細節。目前是用 HTML, CSS 刻劃出網頁的輪廓，期待進入學期二可以加入 JavaScript 讓他真的動起來！\n後記 # 學習體驗因人而異，且與個人的「學習目標」、「學科背景」有一定程度的關聯性，有空會再另開篇幅介紹自己的背景，增加這篇心得的參考性。\n在 ALPHA Camp 其他學期的學習心得可以參考\n","date":"2019 November 24","externalUrl":null,"permalink":"/posts/2019-11-24-alphacamp-semester-1-reflection/","section":"Posts","summary":"隨著 ALPHA Camp（以下簡稱 AC ）學期一的課程接近尾聲，我登入了註冊已久卻從未使用過的 Medium 帳號，決定記錄一下這四週的學習歷程（絕不只是為了完成最後一週的作業哦 :P）。","title":"ALPHA Camp 學期一學習心得","type":"posts"},{"content":"","date":"0001 January 1","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"0001 January 1","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]